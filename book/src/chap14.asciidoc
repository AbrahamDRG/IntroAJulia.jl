[[chap14]]
== Archivos

Este capítulo presenta la idea de programas "persistentes" que mantienen los datos en almacenamiento permanente, y muestra cómo usar diferentes tipos de almacenamiento permanente, tales como archivos y bases de datos.

=== Persistencia

La mayoría de los programas que hemos visto hasta ahora han sido transitorios, es decir se ejecutan por un corto tiempo y generan una de salida, pero cuando terminan, sus datos desaparecen. Si ejecuta el programa nuevamente, este comienza de cero.
(((transient)))

Otros programas son _persistentes_; se ejecutan durante un largo período de tiempo (o todo el tiempo), mantienen al menos parte de sus datos en almacenamiento permanente (en un disco duro, por ejemplo), y si se apagan y vuelven a comenzar, retoman donde lo dejaron.
(((persistent)))

Ejemplos de programas persistentes son los sistemas operativos, que se ejecutan siempre que una computadora esté encendida, y los servidores web, que se ejecutan todo el tiempo, esperando que lleguen solicitudes a la red.

Una de las formas más simples para que los programas mantengan sus datos es leyendo y escribiendo _archivos de texto_. Ya hemos visto programas que leen archivos de texto; en este capítulo veremos programas que los escriben.

Otra alternativa es almacenar el estado del programa en una base de datos. En este capítulo también se presentará cómo usar una base de datos simple.

[[reading_and_writing]]
=== Lectura y Escritura

Un archivo de texto es una secuencia de caracteres almacenados en un medio permanente, como un disco duro o una memoria flash. Ya vimos cómo abrir y leer un archivo en <<reading_word_lists>>.

Para escribir un archivo, debe abrirlo con el modo +"w"+ como segundo parámetro:
(((open)))

[source,@julia-repl-test chap14]
----
julia> fout = open("salida.txt", "w")
IOStream(<file salida.txt>)
----

Si el archivo ya existe, abrirlo en modo de escritura borra los datos antiguos y comienza de nuevo, ¡así que tenga cuidado!. Si el archivo no existe, se crea uno nuevo. +open+ devuelve un objeto de archivo y la función +write + coloca datos en el archivo.
(((write)))((("function", "Base", "write", see="write")))

[source,@julia-repl-test chap14]
----
julia> linea1 = "El Cid convoca a sus vasallos;\n";

julia> write(fout, linea1)
31
----

El valor de retorno es el número de caracteres que se escribieron. El objeto de archivo lleva registro de dónde quedó por última vez, por lo que si llama a +write+ nuevamente, esta agrega nuevos datos al final del archivo.

[source,@julia-repl-test chap14]
----
julia> linea2 = "éstos se destierran con él.\n";

julia> write(fout, linea2)
30
----

Cuando termine de escribir, debe cerrar el archivo.
(((close)))

[source,@julia-repl-test chap14]
----
julia> close(fout)

----

Si no cierra el archivo, se cierra cuando finaliza el programa.


=== Formateo

El argumento de write tiene que ser una cadena, por lo que si queremos poner otros valores en un archivo, tenemos que convertirlos en cadenas. La forma más fácil de hacerlo es con la función +string+, o con interpolación de cadenas:
(((string)))(((string interpolation)))

[source,@julia-repl-test chap14]
----
julia> fout = open("salida.txt", "w")
IOStream(<file salida.txt>)
julia> write(fout, string(150))
3
----

Otra alternativa es utilizar la familia de funciones de +print(ln)+.
(((print)))(((println)))

[source,@julia-repl-test chap14]
----
julia> camellos = 42
42
julia> println(fout, "He visto $camellos camellos.")

----

[TIP]
====
Una alternativa más potente es la macro +@printf+, que imprime utilizando cadenas de especificación de formato al más puro estilo C, lo cual puede leer en https://docs.julialang.org/en/v1/stdlib/Printf/
(((@printf)))((("macro", "Printf", "@printf", see="@printf")))(((formatting)))
====


=== Nombre de Archivo y Ruta

Los archivos están organizados en _directorios_ (también llamados "carpetas"). Cada programa en ejecución tiene un "directorio actual", que es el directorio predeterminado para la mayoría de las operaciones. Por ejemplo, cuando abre un archivo para leer, Julia lo busca en el directorio actual.
(((directory)))((("folder", see="directory")))

La función +pwd+ devuelve el nombre del directorio actual:
(((pwd)))((("function", "Base", "pwd", see="pwd")))

[source,jlcon]
----
julia> cwd = pwd()
"/home/ben"
----

+cwd+ significa "directorio del trabajo actual" (en inglés “current working directory”). El resultado en este ejemplo es +/home/ben+, que es el directorio de inicio de un usuario llamado +ben+.

Una cadena como +"/home/ben"+ que identifica un archivo o directorio se llama _ruta_ o _path_.
(((path)))

Un nombre de archivo simple, como +memo.txt+ también se considera una ruta, pero es una _ruta relativa_ porque se relaciona con el directorio actual. Si el directorio actual es +/home/ben+, el nombre de archivo +memo.txt+ se referiría a +/home/ben/memo.txt+.
(((relative path)))((("path", "relative", see="relative path")))

Una ruta que comienza con +/+ no depende del directorio actual. Este tipo de ruta se llama una ruta absoluta. Para encontrar la ruta absoluta de un archivo, puede usar +abspath+:
(((absolute path)))((("path", "absolute", see="absolute path")))(((abspath)))((("function", "Base", "abspath", see="abspath")))

[source,jlcon]
----
julia> abspath("memo.txt")
"/home/ben/memo.txt"
----

Julia también tiene otras funciones para trabajar con nombres de archivo y rutas. Por ejemplo, +ispath+ comprueba si existe un archivo o directorio:
(((ispath)))((("function", "Base", "ispath", see="ispath")))

[source,jlcon]
----
julia> ispath("memo.txt")
true
----

Si existe, +isdir+ comprueba si es un directorio:
(((isdir)))((("function", "Base", "isdir", see="isdir")))

[source,jlcon]
----
julia> isdir("memo.txt")
false
julia> isdir("/home/ben")
true
----

Del mismo modo, +isfile+ comprueba si se trata de un archivo.
(((isfile)))((("function", "Base", "isfile", see="isfile")))

+readdir+ devuelve una matriz de los archivos (y otros directorios) en el directorio dado:
(((readdir)))((("function", "Base", "readdir", see="readdir")))

[source,jlcon]
----
julia> readdir(cwd)
3-element Array{String,1}:
 "memo.txt"
 "musica"
 "fotos"
----

Para mostrar el funcionamiento de estas funciones, el siguiente ejemplo "recorre" un directorio, imprime los nombres de todos los archivos y se llama a si misma, de manera recursiva, en todos los directorios.
(((walk)))((("function", "programmer-defined", "walk", see="walk")))

[source,@julia-setup chap14]
----
function recorrer(nombredir)
    for nombre in readdir(nombredir)
        ruta = joinpath(nombredir, nombre)
        if isfile(ruta)
            println(ruta)
        else
            recorrer(ruta)
        end
    end
end
----

+joinpath+ toma un directorio y un nombre de archivo, y los une en una ruta completa.
(((joinpath)))((("function", "Base", "joinpath", see="joinpath")))

[TIP]
====
Julia tiene una función integrada llamada +walkdir+ (consulte https://docs.julialang.org/en/v1/base/file/#Base.Filesystem.walkdir) que es similar a esta pero más versátil. Como ejercicio, lea la documentación y úsela para imprimir los nombres de los archivos en un directorio dado y sus subdirectorios.
(((walkdir)))((("function", "Base", "walkdir", see="walkdir")))
====


[[catching_exceptions]]
=== Captura de Excepciones

Muchas cosas pueden salir mal al intentar leer y escribir archivos. Al intentar abrir un archivo que no existe, se obtiene un +SystemError+:
(((SystemError)))((("error", "Base", "SystemError", see="SystemError")))

[source,@julia-repl-test]
----
julia> fin = open("archivo_malo.txt")
ERROR: SystemError: opening file "archivo_malo": No such file or directory
----

Si intentas abrir un archivo pero no tienes permiso para acceder a él, obtienes el error de sistema "Permission denied" (Permiso denegado).

Para evitar estos errores, se podrían usar funciones como +ispath+ y +isfile+, pero tomaría mucho tiempo y líneas de código verificar todas las posibilidades.

Es más fácil intentar lidiar con los problemas a medida que ocurren, que es exactamente lo que hace la sentencia +try+. La sintaxis es similar a una sentencia +if+:
(((try statement)))((("statement", "try", see="try statement")))(((try)))((("keyword", "try", see="try")))(((catch)))((("keyword", "catch", see="catch")))(((end)))

[source,julia]
----
try
    fin = open("archivo_malo.txt")
catch exc
    println("Algo salió mal: $exc")
end
----

Julia comienza ejecutando la secuencia de sentencias del bloque +try+. Si todo va bien, se saltará todo el bloque +catch+ y continuará. Si ocurre una excepción, Julia saltara fuera del bloque +try+ y ejecutará la secuencia de sentencias del bloque +catch+.

Gestionar una excepcion con una sentencia +try+ recibe el nombre de _capturar_ una excepcion. En este ejemplo, el bloque +catch+ muestra un mensaje de error que no es muy útil. En general, capturar una excepcion te da la oportunidad de corregir el problema, volverlo a intentar o, al menos, terminar el programa con elegancia.
(((catching an exception)))

Cuando el código realiza cambios de estado o usa recursos como archivos, generalmente se debe realizar un trabajo posterior (como cerrar archivos) al finalizar la programación del código. Las excepciones pueden complicar esta tarea, ya que se podría salir antes de lo esperado de un bloque de código. La palabra reservada +finally+ se constituye como una forma de ejecutar un código cuando se sale de un bloque de código determinado, independientemente de cómo lo haga:
(((finally)))((("keyword", "finally", see="finally")))

[source,julia]
----
f = open("salida.txt")
try
    linea = readline(f)
    println(linea)
finally
    close(f)
end
----

La función +close+ siempre se ejecutará.


[[databases]]
=== Bases de datos

Una _base de datos_ es un archivo que esta organizado para almacenar datos. La mayoría de las bases de datos están organizadas como diccionarios, en el sentido de que realizan asociaciones entre claves y valores. La diferencia mas importante entre un diccionario y una base de datos, es que la base de datos se encuentra en el disco (u otro almacenamiento permanente), de modo que su contenido se conserva despues de que el programa finaliza. 
(((database)))

PiensaEnJulia proporciona una interfaz para +GDBM+ (GNU dbm), que permite crear y actualizar archivos de base de datos. Como ejemplo, crearemos una base de datos que contenga títulos para archivos de imagen.
(((GDBM)))

Abrir una base de datos es similar a abrir otros archivos:
(((DBM)))((("type", "PiensaEnJulia", "DBM", see="DBM")))

[source,@julia-repl-test chap14]
----
julia> using PiensaEnJulia

julia> bd = DBM("titulo", "c")
DBM(<titulo>)
----

El modo "c" significa que la base de datos debe crearse si no existe. El resultado es un objeto de base de datos que se puede usar (para la mayoría de las operaciones) como un diccionario.

Cuando creas un nuevo elemento, +GDBM+ actualiza el archivo de base de datos:
(((bracket operator)))

[source,@julia-repl-test chap14]
----
julia> bd["luismi.png"] = "Foto de Luis Miguel."
"Foto de Luis Miguel."
----

Cuando accede a uno de los elementos, +GDBM+ lee el archivo:

[source,@julia-repl-test chap14]
----
julia> bd["luismi.png"]
"Foto de Luis Miguel."
----

Si realiza otra asignación a una clave existente, +GDBM+ reemplaza el valor anterior:
(((assignment)))

[source,@julia-repl-test chap14]
----
julia> bd["luismi.png"] = "Foto de Luis Miguel cantando."
"Foto de Luis Miguel cantando."
julia> bd["luismi.png"]
"Foto de Luis Miguel cantando."
----

Algunas funciones que tienen un diccionario como argumento, con +claves+ y +valores+, no funcionan con objetos de base de datos. Pero la iteración con un bucle +for+ sí:
(((for statement)))(((iteration)))

[source,julia]
----
for (clave, valor) in bd
    println(clave, ": ", valor)
end
----

Al igual que con otros archivos, debe cerrar la base de datos cuando haya terminado:
(((close)))

[source,@julia-repl-test chap14]
----
julia> close(bd)

----


=== Serialización

Una limitación de +GDBM+ es que las claves y los valores deben ser cadenas o conjuntos de bytes. Si intenta utilizar cualquier otro tipo, se producirá un error.

Las funciones +serialize+ y +deserialize+ pueden ayudar. Traducen casi cualquier tipo de objeto en una matriz de bytes (un iobuffer) adecuada para el almacenamiento en una base de datos, y luego traducen las matrices de bytes en objetos:
(((Serialization)))((("module", "Serialization", see="Serialization")))(((serialize)))((("function", "Serialization", "serialize", see="serialize)))(((IOBuffer)))((("type", "Base", "IOBuffer", see="IOBuffer")))(((take!)))((("function", "Base", "take!", see="take!")))

[source,@julia-repl-test chap14]
----
julia> using Serialization

julia> io = IOBuffer();

julia> t = [1, 2, 3];

julia> serialize(io, t)
24
julia> print(take!(io))
UInt8[0x37, 0x4a, 0x4c, 0x08, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x08, 0xe2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
----

El formato no es obvio para nosotros; pero es fácil de interpretar para Julia. +deserialize+ reconstituye el objeto:
(((deserialize)))((("function", "Serialization", "deserialize", see="deserialize)))

[source,@julia-repl-test chap14]
----
julia> io = IOBuffer();

julia> t1 = [1, 2, 3];

julia> serialize(io, t1)
24
julia> s = take!(io);

julia> t2 = deserialize(IOBuffer(s));

julia> print(t2)
[1, 2, 3]
----

+serialize+ y +deserialize+ escriben y leen desde un objeto iobuffer que representa un I/O stream en memoria. La función +take!+ recupera el contenido del iobuffer como una matriz de bytes y reestablece el iobuffer a su estado inicial.

+serialize+ and +deserialize+ write to and read from a iobuffer object which represents an in-memory I/O stream. The function +take!+ fetches the contents of the iobuffer as a byte array and resets the iobuffer to its initial state.

Although the new object has the same value as the old, it is not (in general) the same object:

[source,@julia-repl-test chap14]
----
julia> t1 == t2
true
julia> t1 ≡ t2
false
----

In other words, serialization and then deserialization has the same effect as copying the object.
(((copying)))

You can use this to store non-strings in a database. 

[TIP]
====
In fact, the storage of non-string in a database is so common that it has been encapsulated in a package called +JLD2+ (see https://github.com/JuliaIO/JLD2.jl).
====


=== Command Objects

Most operating systems provide a command-line interface, also known as a _shell_. Shells usually provide commands to navigate the file system and launch applications. For example, in Unix you can change directories with +cd+, display the contents of a directory with +ls+, and launch a web browser by typing (for example) +firefox+.
(((shell)))(((cd)))

Any program that you can launch from the shell can also be launched from Julia using a _command object_:
(((command object)))(((backticks)))((("``", see="backticks")))

[source,@julia-repl-test chap14]
----
julia> cmd = `echo hello`
`echo hello`
----

Backticks are used to delimit the command.

The function +run+ executes the command:
(((run)))((("function", "Base", "run", see="run"))))

[source,@julia-repl-test chap14]
----
julia> run(cmd);
hello
----

The +hello+ is the output of the echo command, sent to +STDOUT+. The +run+ function itself returns a process object, and throws an +ErrorException+ if the external command fails to run successfully.

If you want to read the output of the external command, +read+ can be used instead:
(((read)))

[source,@julia-repl-test chap14]
----
julia> a = read(cmd, String)
"hello\n"
----

For example, most Unix systems provide a command called +md5sum+ or +md5+ that reads the contents of a file and computes a “checksum”. You can read about MD5 at https://en.wikipedia.org/wiki/Md5. This command provides an efficient way to check whether two files have the same contents. The probability that different contents yield the same checksum is very small (that is, unlikely to happen before the universe collapses).
(((checksum)))(((md5)))(((md5sum)))

You can use a command object to run +md5+ from Julia and get the result:

[source,@julia-repl]
----
filename = "output.txt"
cmd = `md5 $filename`
res = read(cmd, String)
----


=== Modules

Suppose you have a file named +"wc.jl"+ with the following code:
(((linecount)))((("function", "programmer-defined", "linecount", see="linecount")))(((eachline)))

[source,julia]
----
function linecount(filename)
    count = 0
    for line in eachline(filename)
        count += 1
    end
    count
end

print(linecount("wc.jl"))
----

[source,@julia-eval]
----
file = open("wc.jl", "w")
print(file, """function linecount(filename)
    count = 0
    for line in eachline(filename)
        count += 1
    end
    count
end

print(linecount("wc.jl"))""")
close(file)
----

If you run this program, it reads itself and prints the number of lines in the file, which is 9. You can also include it in the REPL like this:
(((include)))((("function", "Base", "include", see="include")))

[source,jl-con]
----
julia> include("wc.jl")
9
----

Julia introduces modules to create separate variable workspace, i.e. new global scopes. 

A module starts with the keyword +module+ and ends with +end+. Naming conflicts are avoided between your own top-level definitions and those found in somebody else's code. +import+ allows to control which names from other modules are visible and +export+ specifies which of your names are public, i.e. can be used outside the module without being prefixed with the name of the module. 
(((scope)))(((module)))((("keyword", "module", see="module")))(((end)))(((import)))((("keyword", "import", see="import")))(((export)))((("keyword", "export", see="export")))(((LineCount)))((("module", "LineCount", see="LineCount")))((("function", "LineCount", "linecount", see="linecount")))

[source,julia]
----
module LineCount
    export linecount

    function linecount(filename)
        count = 0
        for line in eachline(filename)
            count += 1
        end
        count
    end
end
----

The module +LineCount+ object provides +linecount+:

[source,julia]
----
julia> using LineCount

julia> linecount("wc.jl")
11
----

==== Exercise 14-1

Type this example into a file named _wc.jl_, include it into the REPL and enter +using LineCount+.


[WARNING]
====
If you import a module that has already been imported, Julia does nothing. It does not re-read the file, even if it has changed.

If you want to reload a module, you have to restart the REPL. A package +Revise+ exists that can keep your sessions running longer (see https://github.com/timholy/Revise.jl).
====


=== Debugging

When you are reading and writing files, you might run into problems with whitespace. These errors can be hard to debug because spaces, tabs and newlines are normally invisible:
(((\n)))(((\t)))

[source,jlcon]
----
julia> s = "1 2\t 3\n 4";

julia> println(s)
1 2     3
 4
----

The built-in functions +repr+ or +dump+ can help. It takes any object as an argument and returns a string representation of the object.

(((repr)))((("function", "Base", "repr", see="repr")))(((dump)))((("function", "Base", "dump", see="dump")))

[source,@julia-eval chap14]
----
s = "1 2\t 3\n 4";
----

[source,@julia-repl-test chap14]
----
julia> repr(s)
"\"1 2\\t 3\\n 4\""
julia> dump(s)
String "1 2\t 3\n 4"
----

This can be helpful for debugging.
(((debugging)))

One other problem you might run into is that different systems use different characters to indicate the end of a line. Some systems use a newline, represented +\n+. Others use a return character, represented +\r+. Some use both. If you move files between different systems, these inconsistencies can cause problems.
(((\r)))

For most systems, there are applications to convert from one format to another. You can find them (and read more about this issue) at https://en.wikipedia.org/wiki/Newline. Or, of course, you could write one yourself.


=== Glossary

persistent::
Pertaining to a program that runs indefinitely and keeps at least some of its data in permanent storage.
(((persistent)))

text file::
A sequence of characters stored in permanent storage like a hard drive.
(((text file)))

directory::
A named collection of files, also called a folder.
(((directory)))

path::
A string that identifies a file.
(((path)))

relative path::
A path that starts from the current directory.
(((relative path)))

absolute path::
A path that starts from the topmost directory in the file system.
(((absolute path)))

catch::
To prevent an exception from terminating a program using the +try pass:[...] catch pass:[...] finally+ statements.
(((catching)))

database::
A file whose contents are organized like a dictionary with keys that correspond to values.
(((database)))

shell::
A program that allows users to type commands and then executes them by starting other programs.
(((shell)))

command object::
An object that represents a shell command, allowing a Julia program to run commands and read the results.
(((command object)))


=== Exercises

[[ex14-1]]
==== Exercise 14-2

Write a function called +sed+ that takes as arguments a pattern string, a replacement string, and two filenames; it should read the first file and write the contents into the second file (creating it if necessary). If the pattern string appears anywhere in the file, it should be replaced with the replacement string.
(((sed)))((("function", "programmer-defined", "sed", see="sed")))

If an error occurs while opening, reading, writing or closing files, your program should catch the exception, print an error message, and exit.

[[ex14-2]]
==== Exercise 14-3

If you have done <<ex12-2>>, you’ll see that a dictionary is created that maps from a sorted string of letters to the array of words that can be spelled with those letters. For example, +"opst"+ maps to the array +["opts", "post", "pots", "spot", "stop", "tops"]+.

Write a module that imports +anagramsets+ and provides two new functions: +storeanagrams+ should store the anagram dictionary using +JLD2+; +readanagrams+ should look up a word and return an array of its anagrams.
(((storeanagrams)))((("function", "programmer-defined", "storeanagrams", see="storeanagrams")))(((readanagrams)))((("function", "programmer-defined", "readanagrams", see="readanagrams")))

[[ex14-3]]
==== Exercise 14-4

In a large collection of MP3 files, there may be more than one copy of the same song, stored in different directories or with different file names. The goal of this exercise is to search for duplicates.

. Write a program that searches a directory and all of its subdirectories, recursively, and returns an array of complete paths for all files with a given suffix (like _.mp3_).

. To recognize duplicates, you can use +md5sum+ or +md5+ to compute a “checksum” for each files. If two files have the same checksum, they probably have the same contents.

. To double-check, you can use the Unix command +diff+.

