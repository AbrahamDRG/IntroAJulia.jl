[[chap11]]
== Diccionarios

Este capítulo presenta otro tipo integrado llamado diccionario.


=== Un Diccionario es un Mapeo 

Un _diccionario_ es como una matriz, pero más general. En una matriz, los índices tienen que ser enteros; en un diccionario pueden ser (casi) de cualquier tipo.
(((dictionary)))

Un diccionario contiene una colección de índices, llamados _claves_, y una colección de valores. Cada clave está asociada a un solo valor. La asociación entre una clave y un valor se denomina _par clave-valor_ o, a veces, item.
(((key)))(((value)))(((key-value pair)))(((item)))

En lenguaje matemático, un diccionario representa un _mapeo_ de las claves a los valores, es decir, cada clave se asigna a un valor. A modo de ejemplo, crearemos un diccionario que asigne palabras en español a palabras en inglés. En este diccionario, las claves y los valores son cadenas.
(((mapping)))

La función +Dict+ crea un nuevo diccionario sin elementos. Como +Dict+ es el nombre de una función integrada de Julia, debe evitar usarla como nombre de variable.
(((Dict)))((("type", "Base", "Dict", see="Dict")))

[source,@julia-repl-test chap11]
----
julia> ing_a_esp = Dict()
Dict{Any,Any} with 0 entries
----

El tipo de este diccionario está compuesto por el tipo de las claves y de los valores. En este caso, las claves y los valores son de tipo +Any+.
(((curly braces)))((("{}", see="curly braces")))(((Any)))((("type", "Base", "Any", see="Any")))

El diccionario está vacio. Para agregar elementos a él, se pueden usar corchetes:
(((square brackets)))

[source,@julia-repl-test chap11]
----
julia> ing_a_esp["one"] = "uno";

----

Esta línea de código crea un elemento que asigna la clave "one" al valor "uno". Si imprimimos el diccionario nuevamente, vemos un par clave-valor con una flecha +pass:[=&gt;]+ entre la clave y el valor:
(((pass:[=&gt;])))

[source,@julia-repl-test chap11]
----
julia> ing_a_esp
Dict{Any,Any} with 1 entry:
  "one" => "uno"
----

Este formato de salida también es un formato de entrada. Por ejemplo, puedes crear un nuevo diccionario con tres items de la siguiente manera:

[source,@julia-repl-test chap11]
----
julia> ing_a_esp = Dict("one" => "uno", "two" => "dos", "three" => "tres")
Dict{String,String} with 3 entries:
  "two"   => "dos"
  "one"   => "uno"
  "three" => "tres"
----

Todas las claves y valores iniciales son cadenas, por lo que se crea un +Dict{String,String}+.

[WARNING]
====
El orden de los pares clave-valor podría no ser el mismo. Si escribe el mismo ejemplo en su computadora, podría obtener un resultado diferente. En general, el orden de los elementos en un diccionario es impredecible.
====

Esto no significa un problema ya que los elementos de un diccionario nunca se indexan con índices enteros. En lugar de ello, se utilizan las claves para buscar los valores correspondientes:

[source,@julia-repl-test chap11]
----
julia> ing_a_esp["two"]
"dos"
----

La clave "two" nos da el valor "dos", así que el orden de los items no importa.

Si la clave no está en el diccionario, recibimos un mensaje de error:
(((KeyError)))((("error", "Base", "KeyError", see="KeyError")))

[source,@julia-repl-test chap11]
----
julia> ing_a_esp["four"]
ERROR: KeyError: key "four" not found
----

La función +length+ también funciona con diccionarios; devuelve el número de pares clave-valor:
(((length)))

[source,@julia-repl-test chap11]
----
julia> length(ing_a_esp)
3
----

La función +keys+ devuelve una colección con las claves del diccionario:
(((keys)))((("function", "Base", "keys", see="keys")))

[source,@julia-repl-test chap11]
----
julia> ks = keys(ing_a_esp);

julia> print(ks)
["two", "one", "three"]
----

También se puede usar el operador +∈+ para ver si algo es una _clave_ en un diccionario:
(((in)))

[source,@julia-repl-test chap11]
----
julia> "one" ∈ ks
true
julia> "uno" ∈ ks
false
----

Para ver si algo es un valor en un diccionario, se puede usar la función +values+, que devuelve una colección de valores, y luego usar el operador +∈+:
(((values)))((("function", "Base", "values", see="values")))

[source,@julia-repl-test chap11]
----
julia> vs = values(ing_a_esp);

julia> "uno" ∈ vs
true
----

El operador +∈+ utiliza diferentes algoritmos para matrices y diccionarios. Para las matrices, busca los elementos de la matriz en orden, como en <<searching>>. El tiempo de búsqueda es directamente proporcional al largo de la matriz.

Para los diccionarios, Julia usa un algoritmo llamado _tabla hash_ que tiene una propiedad importante: el operador +∈+ toma aproximadamente la misma cantidad de tiempo sin importar cuántos elementos haya en el diccionario.
(((hash table)))

[[dictionary_collection_counters]]
=== Diccionario como una Colección de Frecuencias

Suponga que tienes una cadena y deseas contar cuántas veces aparece cada letra. Hay varias formas de hacerlo:

* Podrías crear 27 variables, una para cada letra del alfabeto. Luego, recorrer la cadena y, para cada carácter, incrementar el contador correspondiente, probablemente utilizando condiciones encadenadas.

* Podrías crear una matriz con 27 elementos. Luego, podrías convertir cada carácter en un número (usando la función integrada +Int+), usar el número como índice en la matriz e incrementar el contador apropiado.

* Puedes crear un diccionario con caracteres como claves y contadores como los valores correspondientes. La primera vez que veas un carácter, agregarías un elemento al diccionario. Después de eso, incrementarías el valor de un elemento existente.

Cada una de estas opciones realiza el mismo cálculo, pero la implementación es diferente.

Una _implementación_ es una forma de realizar un cálculo. Algunas implementaciones son mejores que otras, por ejemplo, una ventaja de la implementación del diccionario es que no tenemos que saber de antemano qué letras aparecen en la cadena y solo tenemos que agregar las letras que aparecen.
(((implementation)))

Así es como se vería el código:

[source,@julia-setup chap11]
----
function histograma(s)
    d = Dict()
    for c in s
        if c ∉ keys(d)
            d[c] = 1
        else
            d[c] += 1
        end
    end
    d
end
----

La función se llama +histograma+, que es un término en estadística para una colección de frecuencias (o conteos).
(((histogram)))((("function", "programmer-defined", "histogram", see="histogram")))

La primera línea de la función crea un diccionario vacío. El ciclo +for+ recorre la cadena +s+. En cada iteración de este ciclo, si el carácter +c+ no está en el diccionario, se crea un nuevo elemento con la clave +c+ y el valor inicial +1+ (ya que hemos visto esta letra una vez). Si +c+ ya está en el diccionario, se incrementa +d[c]+.

Así es como funciona:

[source,@julia-repl-test chap11]
----
julia> h = histograma("brontosaurus")
Dict{Any,Any} with 8 entries:
  'n' => 1
  's' => 2
  'a' => 1
  'r' => 2
  't' => 1
  'o' => 2
  'u' => 2
  'b' => 1
----

El histograma indica que las letras +'a'+ y +'b'+ aparecen una vez; +'o'+ aparece dos veces, y así sucesivamente.

Los diccionarios tienen una función llamada +get+ que toma como argumentos un diccionario, una clave y un valor predeterminado. Si la clave aparece en el diccionario, +get+ devuelve el valor correspondiente; de lo contrario, devuelve el valor predeterminado. Por ejemplo:
(((get)))((("function", "Base", "get", see="get")))

[source,@julia-repl-test chap11]
----
julia> h = histograma("a")
Dict{Any,Any} with 1 entry:
  'a' => 1
julia> get(h, 'a', 0)
1
julia> get(h, 'b', 0)
0
----

==== Ejercicio 11-1

Use +get+ para escribir la función +histograma+ de manera más concisa. Debería poder eliminar la declaración +if+.

=== Iteración y Diccionarios 

Es posible recorrer las claves del diccionario con un ciclo +for+. Por ejemplo, +imprimirhist+ imprime cada clave y su valor correspondiente:
(((printhist)))((("function", "programmer-defined", "printhist", see="printhist")))

[source,@julia-setup chap11]
----
function imprimirhist(h)
    for c in keys(h)
        println(c, " ", h[c])
    end
end
----

Así es como se ve la salida:

[source,@julia-repl-test chap11]
----
julia> h = histograma("perros");

julia> imprimirhist(h)
e 1
r 2
p 1
o 1
s 1
----

Nuevamente, las claves no están en un orden particular. Para recorrer las claves en orden, puede usar +sort+ y +collect+:
(((sort)))(((collect)))

[source,@julia-repl-test chap11]
----
julia> for c in sort(collect(keys(h)))
           println(c, " ", h[c])
       end
e 1
o 1
p 1
r 2
s 1
----


=== Búsqueda inversa

Dado un diccionario +d+ y una clave +k+, es fácil encontrar el valor correspondiente +v = d[k]+. Esta operación se llama _búsqueda_.
(((lookup)))

Pero, ¿qué pasa si tenemos +v+ y queremos encontrar +k+? Existen dos problemas: primeramente, puede haber más de una clave asignada al valor +v+. Dependiendo de lo que queramos, es posible que podamos elegir una de estas claves, o que tengamos que hacer una matriz que las contenga a todas. En segundo lugar, no hay una sintaxis simple para hacer una búsqueda inversa; solo debemos buscar.
(((reverse lookup)))

A continuación se muestra una función que toma un valor y que devuelve la primera clave asignada a ese valor:

[source,@julia-setup chap11]
----
function busquedainversa(d, v)
    for k in keys(d)
        if d[k] == v
            return k
        end
    end
    error("Error de Busqueda")
end
----

Esta función es otro ejemplo del patrón de búsqueda, pero utiliza una función que no hemos visto antes: +error+. La función +error+ se usa para producir un +ErrorException+ que interrumpe el flujo normal. En este caso tiene el mensaje +"Error de Busqueda"+, que indica que no existe una clave.
(((error)))((("function", "Base", "error", see="error")))

Si llega al final del ciclo, eso significa que +v+ no aparece en el diccionario como un valor, por lo que se produce una excepción.

A continuación se muestra un ejemplo de una búsqueda inversa exitosa:

[source,@julia-repl-test chap11]
----
julia> h = histograma("perros");

julia> key = busquedainversa(h, 2)
'r': ASCII/Unicode U+0072 (category Ll: Letter, lowercase)
----

Y una no exitosa:

[source,@julia-repl-test chap11]
----
julia> key = busquedainversa(h, 3)
ERROR: Error de Busqueda
----

El efecto cuando generamos una excepción es el mismo que cuando Julia genera una: se imprime un trazado inverso y un mensaje de error.

Julia proporciona una forma optimizada de hacer una búsqueda inversa: +findall(isequal(3),h)+.
(((findall)))((("function", "Base", "findall", see="findall")))(((isequal)))((("function", "Base", "isequal", see="isequal")))

[WARNING]
====
Una búsqueda inversa es mucho más lenta que una búsqueda directa. Si tiene que hacer búsquedas inversas con frecuencia, o si el diccionario es muy grande, el rendimiento de su programa se verá afectado.
====


=== Diccionarios y Matrices

Las matrices pueden aparecer como valores en un diccionario. Por ejemplo, si tenemos un diccionario que asigna frecuencias a letras, y queremos invertirlo; es decir, tener un diccionario que asigne letras a frecuencias. Dado que pueden haber varias letras con la misma frecuencia, cada valor en el diccionario invertido debería ser una matriz de letras.

Aquí hay una función que invierte un diccionario:
(((invertdict)))((("function", "programmer-defined", "invertdict", see="invertdict")))

[source,@julia-setup chap11]
----
function invertirdic(d)
    inverso = Dict()
    for clave in keys(d)
        val = d[clave]
        if val ∉ keys(inverso)
            inverso[val] = [clave]
        else
            push!(inverso[val], clave)
        end
    end
    inverso
end
----

Cada vez que recorremos el bucle, se asigna a la variable +clave+ una clave de +d+, y a +val+ el valor correspondiente. Si +val+ no está en el diccionario +inverso+, significa que no hemos visto este valor antes, por lo que creamos un nuevo item y lo inicializamos con un _singleton_ (una matriz que contiene un solo elemento). De lo contrario, hemos visto este valor antes, por lo que agregamos la clave correspondiente a la matriz.
(((singleton)))

Aquí hay un ejemplo:

[source,@julia-repl-test chap11]
----
julia> hist = histograma("perros");

julia> inverso = invertirdic(hist)
Dict{Any,Any} with 2 entries:
  2 => ['r']
  1 => ['s', 'e', 'p', 'o']
----

[[fig11-1]]
.State diagram
image::images/fig111.svg[]

<<fig11-1>> es un diagrama de estado que muestra +hist+ e +inverso+. Un diccionario se representa como un cuadro con los pares clave-valor dentro. En este libro, si los valores son enteros, números de punto flotante o cadenas de texto, se dibujan dentro del cuadro, y las matrices (generalmente) se dibujan fuera del cuadro, solo para mantener el diagrama simple.
(((state diagram)))

[NOTE]
====
Anteriormente se mencionó que un diccionario se implementa usando una tabla hash (también llamada matriz asociativa, hashing, mapa hash, tabla de dispersión o tabla fragmentada), lo cual significa que las claves deben ser _hashable_.
(((hashable)))

Un _hash_ es una función que toma un valor (de cualquier tipo) y devuelve un entero. Los diccionarios usan estos enteros, llamados valores hash, para almacenar y buscar pares clave-valor.
(((hash)))
====

[[memos]]
=== Pistas

Si estuvo jugando con la función +fibonacci+ de <<one_more_example>>, es posible que haya notado que cuanto más grande el argumento que le da, más tiempo tarda la función en ejecutarse. Más aún, el tiempo de ejecución aumenta muy rápidamente.
(((fibonnaci)))

Para entender por qué, considere <<fig11-2>>, que muestra el _gráfico de llamadas_ para la función +fibonacci+ con +n = 4+:
(((call graph)))((("diagram", "call graph", see="call graph")))

[[fig11-2]]
.Call graph
image::images/fig112.svg[]

Un gráfico de llamadas muestra un conjunto de cuadros de funciones, con líneas que conectan cada cuadro con los cuadros de las funciones a las que llama. En la parte superior del gráfico, +fibonacci+ con +n = 4+ llama a +fibonacci+ con +n = 3+ y +n = 2+. A su vez, +fibonacci+ con +n = 3+ llama a +fibonacci+ con +n = 2+ y +n = 1+. Y así sucesivamente.

Cuente cuántas veces se llama a +fibonacci(0)+ y +fibonacci(1)+. Esta es una solución ineficiente al problema, y empeora a medida que el argumento aumenta en tamaño.

Una solución es llevar un registro de los valores que ya se han calculado almacenándolos en un diccionario. Un valor que ya ha sido calculado y almacenado para un uso posterior se le denomina _pista_. Aquí hay una implementación de fibonacci con pistas:
(((memo)))

[source,@julia-setup]
----
anteriores = Dict(0=>0, 1=>1)

function fibonacci(n)
    if n ∈ keys(anteriores)
        return anteriores[n]
    end
    res = fibonacci(n-1) + fibonacci(n-2)
    anteriores[n] = res
    res
end
----

El diccionario llamado +anteriores+ mantiene un registro de los valores de Fibonacci que ya conocemos. El programa comienza con dos pares: +0+ corresponde a +1+ y +1+ corresponde a +1+.

Siempre que se llama a +fibonacci+, se comprueba si el diccionario contiene el resultado ya calculado. Si está ahi, la función puede devolver el valor inmediatamente. Si no, tiene que calcular el nuevo valor, añadirlo al diccionario y devolverlo.

Si ejecuta esta versión de +fibonacci+ y la compara con la original, se dará cuenta de que es mucho más rápida.

[[global_variables]]
=== Variables Globales 

En el ejemplo anterior, el diccionario anteriores se crea fuera de la función, por lo que pertenece al marco especial llamado +Main+. Las variables en +Main+ a veces son llamadas _globales_ porque se puede acceder a ellas desde cualquier función. A diferencia de las variables locales, que desaparecen cuando finaliza su función, las variables globales existen de una llamada de función a la siguiente.
(((global)))((("keyword", "global", see="global")))(((global variable)))

Es común usar variables globales como _flags_ o _banderas_; es decir, variables booleanas que indican si una condición es verdadera. Por ejemplo, algunos programas usan una bandera llamada +verbosa+ para controlar el nivel de detalle en la salida:
(((flag)))

[source,@julia-setup]
----
verbose = true

function ejemplo1()
    if verbosa
        println("Ejecutando ejemplo1")
    end
end
----

Si intentas reasignar una variable global, te sorprenderás. El siguiente ejemplo trata de llevar registro sobre si se ha llamado o no a una función:

[source,@julia-setup]
----
ha_sido_llamada = false

function ejemplo2()
    ha_sido_llamada = true         # MALO
end
----

Pero si lo ejecutas, verás que el valor de +ha_sido_llamada+ no cambia. El problema es que +ejemplo2 + crea una nueva variable local llamada +ha_sido_llamada+. La variable local desaparece cuando finaliza la función y no tiene efecto en la variable global.

Para reasignar una variable global dentro de una función, debe _declarar_ la variable global antes de usarla:
(((declaration)))(((reassignment)))

[source,@julia-setup]
----
been_called = false

function ejemplo2()
    global ha_sido_llamada
    ha_sido_llamada = true
end
----

La _sentencia global_ le dice al intérprete algo como esto: “En esta función, cuando digo +ha_sido_llamada+, me refiero a la variable global; así que no crees una variable local".
(((global statement)))((("statement", "global", see="global statement")))

A continuación se muestra un ejemplo que intenta actualizar una variable global:

[source,@julia-setup chap11]
----
conteo = 0

function ejemplo3()
    conteo = conteo + 1          # MALO
end
----

Si lo ejecutas obtienes:
(((UndefVarError)))

[source,@julia-repl-test chap11]
----
julia> ejemplo3()
ERROR: UndefVarError: count not defined
----

Julia asume que +conteo+ es local, y bajo esa suposición lo estás leyendo antes de escribirlo. La solución, nuevamente, es declarar +conteo+ como global.

[source,@julia-setup]
----
conteo = 0

function ejemplo3()
    global conteo
    conteo += 1
end
----

Si una variable global se refiere a un valor mutable, puedes modificar el valor sin declarar la variable global:

[source,@julia-setup]
----
anteriores = Dict(0=>0, 1=>1)

function ejemplo4()
    anteriores[2] = 1
end
----

Por lo tanto, puede agregar, eliminar y reemplazar elementos de una matriz global o diccionario, pero si desea reasignar la variable, debe declararla global:

[source,@julia-setup]
----
anteriores = Dict(0=>0, 1=>1)

function ejemplo5()
    global anteriores
    anteriores = Dict()
end
----

Para mejorar el rendimiento, puedes declarar la variable global como constante. Con esto, ya no se puede reasignar la variable, pero si se refiere a un valor mutable, sí se puede modificar el valor.
(((const)))((("keyword", "const", see="const")))(((constant global variable)))

[source,@julia-setup]
----
const known = Dict(0=>0, 1=>1)

function example4()
    known[2] = 1
end
----

[WARNING]
====
Las variables globales pueden ser útiles, pero si tiene muchas de ellas y las modifica con frecuencia, pueden dificultar la depuración y empeorar el desempeño de los programas.
====

=== Depuración

A medida que trabaja con conjuntos de datos más grandes, la depuración imprimiendo y verificando la salida de manera manual puede tornarse difícil. Aquí hay algunas sugerencias para depurar grandes conjuntos de datos:
(((debugging)))

* Reduzca la entrada:
+
Si es posible, reduzca el tamaño del conjunto de datos. Por ejemplo, si el programa lee un archivo de texto, comience con solo las primeras 10 líneas, o con el ejemplo más pequeño que pueda encontrar que produzca errores. No debe editar los archivos, sino modificar el programa para que solo lea las primeras latexmath:[\(n\)] líneas.
(((scale down)))
+
Si hay un error, puede reducir latexmath:[\(n\)] al valor más pequeño que manifieste el error, y luego aumentarlo gradualmente a medida que encuentre y corrija errores.

* Consultar resúmenes y tipos
* Check summaries and types:
+
Instead of printing and checking the entire dataset, consider printing summaries of the data: for example, the number of items in a dictionary or the total of an array of numbers.
(((check)))
+
A common cause of runtime errors is a value that is not the right type. For debugging this kind of error, it is often enough to print the type of a value.

* Write self-checks:
+
Sometimes you can write code to check for errors automatically. For example, if you are computing the average of an array of numbers, you could check that the result is not greater than the largest element in the array or less than the smallest. This is called a “sanity check”.
(((self-check)))(((sanity check)))
+
Another kind of check compares the results of two different computations to see if they are consistent. This is called a “consistency check”.
(((consistency check)))

* Format the output:
+
Formatting debugging output can make it easier to spot an error. We saw an example in <<deb06>>.
(((formatting)))
+
Again, time you spend building scaffolding can reduce the time you spend debugging.
(((scaffolding)))(((debugging)))


=== Glossary

mapping::
A relationship in which each element of one set corresponds to an element of another set.
(((mapping)))

dictionary::
A mapping from keys to their corresponding values.
(((dictionary)))

key-value pair::
The representation of the mapping from a key to a value.
(((key-value pair)))

item::
In a dictionary, another name for a key-value pair.
(((item)))

key::
An object that appears in a dictionary as the first part of a key-value pair.
(((key)))

value::
An object that appears in a dictionary as the second part of a key-value pair. This is more specific than our previous use of the word “value”.
(((value)))

implementation::
A way of performing a computation.
(((implementation)))

hash table::
The algorithm used to implement Julia dictionaries.
(((hash table)))

hash function::
A function used by a hash table to compute the location for a key.
(((hash function)))

hashable::
A type that has a hash function.
(((hashable)))

lookup::
A dictionary operation that takes a key and finds the corresponding value.
(((lookup)))

reverse lookup::
A dictionary operation that takes a value and finds one or more keys that map to it.
(((reverse lookup)))

singleton::
An array (or other sequence) with a single element.
(((singleton)))

call graph::
A diagram that shows every frame created during the execution of a program, with an arrow from each caller to each callee.
(((call graph)))

memo::
A computed value stored to avoid unnecessary future computation.
(((memo)))

global variable::
A variable defined outside a function. Global variables can be accessed from any function.
(((global variable)))

global statement::
A statement that declares a variable name global.
(((global statement)))

flag::
A boolean variable used to indicate whether a condition is true.
(((flag)))

declaration::
A statement like +global+ that tells the interpreter something about a variable.
(((declaration)))

constant global variable::
A global variable that can not be reassigned.
(((constant global variable)))


=== Exercises

[[ex11-1]]
==== Exercise 11-2

Write a function that reads the words in _palabras.txt_ and stores them as keys in a dictionary. It doesn’t matter what the values are. Then you can use the +∈+ operator as a fast way to check whether a string is in the dictionary.
(((in)))

If you did <<ex10-10>>, you can compare the speed of this implementation with the array +∈+ operator and the bisection search.

[[ex11-2]]
==== Exercise 11-3

Read the documentation of the dictionary function +get!+ and use it to write a more concise version of +invertdict+.
(((get!)))((("function", "Base", "get!", see="get!")))

[[ex11-3]]
==== Exercise 11-4

Memoize the Ackermann function from <<ex06-2>> and see if memoization makes it possible to evaluate the function with bigger arguments.
(((memo)))(((Ackermann function)))

[[ex11-4]]
==== Exercise 11-5

If you did <<ex10-7>>, you already have a function named +hasduplicates+ that takes an array as a parameter and returns +true+ if there is any object that appears more than once in the array.
(((hasduplicates)))

Use a dictionary to write a faster, simpler version of +hasduplicates+.

[[ex11-5]]
==== Exercise 11-6

Two words are “rotate pairs” if you can rotate one of them and get the other (see +rotateword+ in <<ex08-5>>).
(((rotateword)))

Write a program that reads a word array and finds all the rotate pairs.

[[ex11-6]]
==== Exercise 11-7

Here’s another Puzzler from Car Talk (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
This was sent in by a fellow named Dan O’Leary. He came upon a common one-syllable, five-letter word recently that has the following unique property. When you remove the first letter, the remaining letters form a homophone of the original word, that is a word that sounds exactly the same. Replace the first letter, that is, put it back and remove the second letter and the result is yet another homophone of the original word. And the question is, what’s the word?

Now I’m going to give you an example that doesn’t work. Let’s look at the five-letter word, ‘wrack.’ W-R-A-C-K, you know like to ‘wrack with pain.’ If I remove the first letter, I am left with a four-letter word, ’R-A-C-K.’ As in, ‘Holy cow, did you see the rack on that buck! It must have been a nine-pointer!’ It’s a perfect homophone. If you put the ‘w’ back, and remove the ‘r,’ instead, you’re left with the word, ‘wack,’ which is a real word, it’s just not a homophone of the other two words.

But there is, however, at least one word that Dan and we know of, which will yield two homophones if you remove either of the first two letters to make two, new four-letter words. The question is, what’s the word?
____

You can use the dictionary from <<ex11-1>> to check whether a string is in the word array.

[TIP]
====
To check whether two words are homophones, you can use the CMU Pronouncing Dictionary. You can download it from http://www.speech.cs.cmu.edu/cgi-bin/cmudict.
====

Write a program that lists all the words that solve the Puzzler.

