[[chap08]]
== Cadenas

Las cadenas son diferentes de los n√∫meros enteros, flotantes y booleanos. Una cadena es una _secuencia_, es decir, es una colecci√≥n ordenada de valores. En este cap√≠tulo veremos c√≥mo acceder a los caracteres que forman una cadena, y aprenderemos algunas funciones integradas en Julia relacionadas con cadenas.
(((string)))(((sequence)))

[[characters]]
=== Caracteres

Los hispanohablantes est√°n familiarizados con algunos caracteres, tales como las letras del alfabeto (A, B, C, ...), los n√∫meros y los signos de puntuaci√≥n comunes. Estos caracteres est√°n estandarizados en el c√≥digo _ASCII_ (C√≥digo Est√°ndar Estadounidense para el Intercambio de Informaci√≥n).
(((ASCII standard)))

Por supuesto hay muchos otros caracteres utilizados en idiomas distintos del espa√±ol que no est√°n en el c√≥digo _ASCII_, tales como aquellos usados en los idiomas griego, √°rabe, chino, hebreo, hindi, japon√©s y coreano.

Definir qu√© es un car√°cter es altamente complejo. La _norma Unicode_ permite abordar este problema, y se considera como el est√°ndar definitivo para ello. Esta norma funciona asignando un n√∫mero √∫nico para cada car√°cter a nivel global.
(((Unicode standard)))

Un valor +Char+ representa un √∫nico car√°cter y est√° entre comillas simples:
(((Char)))((("type", "Base", "Char", see="Char")))

[source,@julia-repl-test]
----
julia> 'x'
'x': ASCII/Unicode U+0078 (category Ll: Letter, lowercase)
julia> 'üçå'
'üçå': Unicode U+01f34c (category So: Symbol, other)
julia> typeof('x')
Char
----

Incluso los emojis son parte del est√°ndar Unicode. (*+\:banana: TAB+*)
(((emoji)))


=== Una Cadena es una Secuencia

Una cadena es una secuencia de caracteres. Se puede acceder a un car√°cter con el operador corchete:
(((string)))(((String)))(((sequence)))(((bracket operator)))((("[]", see="bracket operator")))((("operator", "Base", "[]", see="bracket operator")))

[source,@julia-repl-test chap08]
----
julia> fruta = "banana"
"banana"
julia> letra = fruit[1]
'b': ASCII/Unicode U+0062 (category Ll: Letter, lowercase)
----

La segunda sentencia selecciona el car√°cter n√∫mero 1 de +fruta+ y la asigna a la variable +letra+. 

La expresi√≥n entre corchetes se llama _indice_. El √≠ndice indica el car√°cter de la secuencia a obtener (de ah√≠ el nombre).
(((index)))

La indexaci√≥n en Julia es base 1, es decir, el primer elemento de cualquier objeto indexado con enteros est√° en el √≠ndice 1, y el √∫ltimo en el √≠ndice +end+:
(((end)))

[source,@julia-repl-test chap08]
----
julia> fruta[end]
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
----

Como √≠ndice se pueden usar expresiones que contengan variables y operadores:

[source,@julia-repl-test chap08]
----
julia> i = 1
1
julia> fruta[i+1]
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
julia> fruta[end-1]
'n': ASCII/Unicode U+006e (category Ll: Letter, lowercase)
----

Pero el valor del √≠ndice tiene que ser un n√∫mero entero. De lo contrario se obtiene:
(((MethodError)))((("error", "Core", "MethodError", see="MethodError")))

[source,@julia-repl-test chap08]
----
julia> letra = fruta[1.5]
ERROR: MethodError: no method matching getindex(::String, ::Float64)
----


=== +length+

+length+ es una funci√≥n integrada que devuelve el n√∫mero de caracteres de una cadena:
(((length)))

[source,@julia-repl-test chap08]
----
julia> frutas = "üçå üçé üçê"
"üçå üçé üçê"
julia> len = length(frutas)
5
----

Para obtener la √∫ltima letra de una cadena, puede sentirse tentado a probar algo como esto:

[source,@julia-repl-test chap08]
----
julia> last = frutas[len]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)
----

Pero con esto no se obtendr√° el resultado esperado.

Las cadenas se codifican usando _codificaci√≥n UTF-8_. UTF-8 es una codificaci√≥n de longitud variable, lo que significa que no todos los caracteres est√°n codificados con el mismo n√∫mero de bytes.
(((UTF-8 encoding)))

La funci√≥n +sizeof+ devuelve el n√∫mero de bytes de una cadena:
(((sizeof)))((("function", "Base", "sizeof", see="sizeof")))

[source,@julia-repl-test chap08]
----
julia> sizeof("üçå")
4
----

Dado que un emoji est√° codificado en 4 bytes y la indexaci√≥n de cadenas est√° basada en bytes, el quinto elemento de +frutas+ es un +ESPACIO+.
(((emoji)))

Esto significa que no todos los √≠ndices de byte de una cadena UTF-8 son necesariamente √≠ndices v√°lidos para un car√°cter. Si en una cadena se indexa con un √≠ndice de bytes no v√°lido, se genera un error:
(((StringIndexError)))((("error", "Base", "StringIndexError", see="StringIndexError")))

[source,@julia-repl-test chap08]
----
julia> frutas[2]
ERROR: StringIndexError("üçå üçé üçê", 2)
----

En el caso de +frutas+, el car√°cter +üçå+ es un car√°cter de cuatro bytes, por lo que los √≠ndices 2, 3 y 4 no son v√°lidos y el √≠ndice del siguiente car√°cter es 5; el siguiente √≠ndice v√°lido se puede calcular con +nextind(frutas, 1)+, y el subsiguiente con +nextind(frutas,5)+ y as√≠ sucesivamente.
(((nextind)))((("function", "Base", "nextind", see="nextind")))


=== Recorrido

Muchos c√°lculos implican procesar una cadena car√°cter por car√°cter. A menudo empiezan por el principio, seleccionan cada car√°cter uno a uno, hacen algo con √©l y contin√∫an hasta el final. Este patr√≥n de proceso se llama _recorrido_. Una forma de escribir un recorrido es con una sentencia while:
(((traversal)))(((while statement)))

[source,@julia-setup chap08]
----
indice = primerindice(frutas)
while indice <= sizeof(frutas)
    letra = frutas[indice]
    println(letra)
    global indice = nextind(frutas, indice)
end
----

Este bucle recorre la cadena y muestra cada letra en una l√≠nea distinta. La condici√≥n del bucle es +index pass:[&lt;=] sizeof(fruta)+, de modo que cuando el indice es mayor al n√∫mero de bytes en la cadena, la condici√≥n es +falsa+, y no se ejecuta el cuerpo del bucle.

La funci√≥n +primerindice+ devuelve el primer √≠ndice de bytes v√°lido. La palabra reservada +global+ antes de +indice+ indica que queremos reasignar la variable +indice+ definida en +Main+ (ver <<variables_globales>>).
(((global)))(((firstindex)))((("function", "Base", "firstindex", see="firstindex")))

==== Ejercicio 8-1

Escriba una funci√≥n que tome una cadena como argumento y muestre las letras hacia atr√°s, una por l√≠nea.

Otra forma de escribir un recorrido es con un bucle +for+:
(((for statement)))(((in)))

[source,@julia-setup chap08]
----
for letra in frutas
    println(letra)
end
----

Cada vez que recorremos el bucle, se asigna a la variable +letra+ el siguiente car√°cter de la cadena. El bucle contin√∫a hasta que no quedan m√°s caracteres.

El ejemplo siguiente muestra c√≥mo usar la concatenaci√≥n (multiplicaci√≥n de cadenas) y un bucle for para generar una serie abecedaria (es decir, una serie con elementos en orden alfab√©tico). Por ejemplo, en el libro de Robert McCloskey _Make Way for Ducklings_, los nombres de los patitos son Jack, Kack, Lack, Mack, Nack, Ouack, Pack, y Quack. Este bucle muestra esos nombres en orden:

[source,@julia chap08-3]
----
prefijos = "JKLMNOPQ"
sufijos = "ack"

for letra in prefijos
    println(letra * sufijo)
end
----

Por supuesto, esto no es del todo correcto, porque ‚ÄúOuack‚Äù y ‚ÄúQuack‚Äù no est√°n correctamente escritos.

==== Ejercicio 8-2

Modifique este programa para solucionar este error.

=== Porciones de Cadenas

A la subcadena de una cadena se le llama _porci√≥n_. La selecci√≥n de una porci√≥n es similar a la selecci√≥n un car√°cter:
(((slice)))

[source,@julia-repl-test chap08]
----
julia> str = "Julio Cesar";

julia> str[1:6]
"Julio"
----

El operador +[n:m]+ devuelve la parte de la cadena desde el +n+-√©simo byte hasta el +m+-√©simo. Por lo tanto, se necesita el mismo cuidado que para la indexaci√≥n simple.
(((bracket operator)))

La palabra reservada +end+ se puede usar para indicar al √∫ltimo byte de la cadena:
(((end)))

[source,@julia-repl-test chap08]
----
julia> str[8:end]
"Cesar"
----

Si el primer √≠ndice es mayor que el segundo, el resultado es una _cadena vac√≠a_, representada por dos comillas:
(((empty string)))((("&quot;&quot;", see="empty string")))

[source,@julia-repl-test chap08]
----
julia> str[8:7]
""
----

Una cadena vac√≠a no contiene caracteres y tiene una longitud de 0, pero aparte de eso es igual a cualquier otra cadena.

==== Ejercicio 8-3

Continuando este ejemplo, ¬øqu√© crees que significa +str[:]+? Prueba y ver√°s.

=== Las Cadenas son Inmutables

Es tentador usar el operador +[]+ en el lado izquierdo de una asignaci√≥n, con la intenci√≥n de cambiar un car√°cter en una cadena. Por ejemplo:
(((bracket operator)))(((MethodError)))

[source,@julia-repl-test chap08]
----
julia> saludo = "¬°Hola, mundo!"
"¬°Hola, mundo!"
julia> saludo[2] = 'J'
ERROR: MethodError: no method matching setindex!(::String, ::Char, ::Int64)
----
Nota del traductor: De acuerdo con la codificaci√≥n de caracteres en utf-8 √≥ latin-1, el car√°cter de exclamaci√≥n ‚Äò¬°‚Äô, en la variable saludo ocupa dos posiciones, de ah√≠ que la letra ‚ÄòH‚Äô est√© localizada en el √≠ndice 2.

La raz√≥n del error es que las cadenas son _inmutables_, lo que significa que no puede cambiar una cadena existente. Lo m√°s que puedes hacer es crear una nueva cadena que sea una variaci√≥n de la original:
(((immutable)))

[source,@julia-repl-test chap08]
----
julia> saludo = "J" * saludo[2:end]
"¬°Jola, mundo!"
----

Este ejemplo concatena la apertura del signo de exclamaci√≥n y una nueva primera letra a una porci√≥n de saludo. Esta operaci√≥n no tiene efecto sobre la cadena original.

=== Interpolaci√≥n de Cadenas

Construir cadenas usando concatenaci√≥n puede ser un poco engorroso. Para disminuir la necesidad de estas llamadas a +string+ o multiplicaciones repetidas, Julia permite la _interpolaci√≥n de cadenas_ usando +$+:
(((string interpolation)))((("$", see="string interpolation")))

[source,@julia-repl-test]
----
julia> saludo = "Hola"
"Hello"
julia> paraquien = "mundo"
"World"
julia> "$¬°saludo, $(paraquien)!"
"¬°Hola, mundo!"
----

Esto es m√°s entendible y conveniente que la concatenaci√≥n de cadenas: +pass:[greet * ", " * whom * "!"]+

La expresi√≥n completa m√°s corta despu√©s de +$+ se toma como la expresi√≥n cuyo valor se va a interpolar en la cadena. Por lo tanto, puede interpolar cualquier expresi√≥n en una cadena usando par√©ntesis:

The shortest complete expression after the +$+ is taken as the expression whose value is to be interpolated into the string. Thus, you can interpolate any expression into a string using parentheses:

[source,@julia-repl-test]
----
julia> "1 + 2 = $(1 + 2)"
"1 + 2 = 3"
----

[[searching]]
=== Searching

What does the following function do?
(((find)))((("function", "programmer-defined", "find", see="find")))

[source,@julia-setup]
----
function find(word, letter)
    index = firstindex(word)
    while index <= sizeof(word)
        if word[index] == letter
            return index
        end
        index = nextind(word, index)
    end
    -1
end
----

In a sense, find is the inverse of the +[]+ operator. Instead of taking an index and extracting the corresponding character, it takes a character and finds the index where that character appears. If the character is not found, the function returns -1.

This is the first example we have seen of a return statement inside a loop. If +word[index] == letter+, the function breaks out of the loop and returns immediately.

If the character doesn‚Äôt appear in the string, the program exits the loop normally and returns -1.

This pattern of computation‚Äîtraversing a sequence and returning when we find what we are looking for‚Äîis called a _search_.
(((search)))

==== Exercise 8-4

Modify +find+ so that it has a third parameter, the index in +word+ where it should start looking.


[[looping_and_counting]]
=== Looping and Counting

The following program counts the number of times the letter +a+ appears in a string:

[source,@julia-setup]
----
word = "banana"
counter = 0
for letter in word
    if letter == 'a'
        global counter = counter + 1
    end
end
println(counter)
----

This program demonstrates another pattern of computation called a _counter_. The variable +counter+ is initialized to 0 and then incremented each time an +a+ is found. When the loop exits, +counter+ contains the result‚Äîthe total number of +a+‚Äôs.
(((counter)))

==== Exercise 8-5

Encapsulate this code in a function named +count+, and generalize it so that it accepts the string and the letter as arguments.

Then rewrite the function so that instead of traversing the string, it uses the three-parameter version of +find+ from the previous section.


=== String Library

Julia provides functions that perform a variety of useful operations on strings. For example, the function +uppercase+ takes a string and returns a new string with all uppercase letters.
(((uppercase)))((("function", "Base", "uppercase", see="uppercase")))

[source,@julia-repl-test]
----
julia> uppercase("Hello, World!")
"HELLO, WORLD!"
----

As it turns out, there is a function named +findfirst+ that is remarkably similar to the function +find+ we wrote:
(((findfirst)))((("function", "programmer-defined", "findfirst", see="findfirst")))

[source,@julia-repl-test]
----
julia> findfirst("a", "banana")
2:2
----

Actually, the +findfirst+ function is more general than our function; it can find substrings, not just characters:

[source,@julia-repl-test]
----
julia> findfirst("na", "banana")
3:4
----

By default, +findfirst+ starts at the beginning of the string, but the function +findnext+ takes a third argument, the +index+ where it should start:
(((findnext)))((("function", "programmer-defined", "findnext", see="findnext")))

[source,@julia-repl-test]
----
julia> findnext("na", "banana", 4)
5:6
----


=== The +‚àà+ Operator

The operator +‚àà+ (*+\in TAB+*) is a boolean operator that takes a character and a string and returns +true+ if the first appears in the second:
((("‚àà", see="in")))((("operator", "Base", "in", see="in")))((("operator", "Base", "‚àà", see="in")))

[source,@julia-repl-test]
----
julia> 'a' ‚àà "banana"    # 'a' in "banana"
true
----

For example, the following function prints all the letters from word1 that also appear in word2:
(((inboth)))((("function", "programmer-defined", "inboth", see="inboth")))

[source,@julia-setup chap08-2]
----
function inboth(word1, word2)
    for letter in word1
        if letter ‚àà word2
            print(letter, " ")
        end
    end
end
----

With well-chosen variable names, Julia sometimes reads like English. You could read this loop, ‚Äúfor (each) letter in (the first) word, if (the) letter is an element of (the second) word, print (the) letter.‚Äù

Here‚Äôs what you get if you compare +"apples"+ and +"oranges"+:

[source,@julia-repl-test chap08-2]
----
julia> inboth("apples", "oranges")
a e s
----


=== String Comparison

The relational operators work on strings. To see if two strings are equal:
(((string comparison)))(((==)))

[source,@julia-setup chap08]
----
word = "Pineapple"
if word == "banana"
    println("All right, bananas.")
end
----

Other relational operations are useful for putting words in alphabetical order:
(((alphabetical order)))

[source,@julia-setup chap08]
----
if word < "banana"
    println("Your word, $word, comes before banana.")
elseif word > "banana"
    println("Your word, $word, comes after banana.")
else
    println("All right, bananas.")
end
----

Julia does not handle uppercase and lowercase letters the same way people do. All the uppercase letters come before all the lowercase letters, so:

[source,@julia-eval chap08]
----
if word < "banana"
    println("Your word, $word, comes before banana.")
elseif word > "banana"
    println("Your word, $word, comes after banana.")
else
    println("All right, bananas.")
end
----

[TIP]
====
A common way to address this problem is to convert strings to a standard format, such as all lowercase, before performing the comparison.
====


[[deb08]]
=== Debugging

When you use indices to traverse the values in a sequence, it is tricky to get the beginning and end of the traversal right. Here is a function that is supposed to compare two words and return +true+ if one of the words is the reverse of the other, but it contains two errors:
(((debugging)))(((traversal)))(((isreverse)))((("function", "programmer-defined", "isreverse", see="isreverse")))

[source,@julia-setup chap08]
----
function isreverse(word1, word2)
    if length(word1) != length(word2)
        return false
    end
    i = firstindex(word1)
    j = lastindex(word2)
    while j >= 0
        j = prevind(word2, j)
        if word1[i] != word2[j]
            return false
        end
        i = nextind(word1, i)
    end
    true
end
----

The first +if+ statement checks whether the words are the same length. If not, we can return +false+ immediately. Otherwise, for the rest of the function, we can assume that the words are the same length. This is an example of the guardian pattern.

+i+ and +j+ are indices: +i+ traverses +word1+ forward while +j+ traverses +word2+ backward. If we find two letters that don‚Äôt match, we can return +false+ immediately. If we get through the whole loop and all the letters match, we return +true+.

The function +lastindex+ returns the last valid byte index of a string and +prevind+ the previous valid index of a character.

If we test this function with the words "pots" and "stop", we expect the return value +true+, but we get +false+:

[source,@julia-repl-test chap08]
----
julia> isreverse("pots", "stop")
false
----

For debugging this kind of error, my first move is to print the values of the indices:

[source,julia]
----
    while j >= 0
        j = prevind(word2, j)
        @show i j
        if word1[i] != word2[j]
----

[source,@julia-eval chap08]
----
function isreverse(word1, word2)
    if length(word1) != length(word2)
        return false
    end
    i = firstindex(word1)
    j = lastindex(word2)
    while j >= 0
        j = prevind(word2, j)
        @show i j
        if word1[i] != word2[j]
            return false
        end
        i = nextind(word1, i)
    end
    true
end;
----

Now when I run the program again, I get more information:

[source,@julia-repl-test chap08]
----
julia> isreverse("pots", "stop")
i = 1 
j = 3
false
----

The first time through the loop, the value of +j+ is 3, which has to be 4. This can be fixed by moving +j = prevind(word2, j)+ to the end of the +while+ loop.

If I fix that error and run the program again, I get:

[source,@julia-eval chap08]
----
function isreverse(word1, word2)
    if length(word1) != length(word2)
        return false
    end
    i = firstindex(word1)
    j = lastindex(word2)
    while j >= 0
        @show i j
        if word1[i] != word2[j]
            return false
        end
        i = nextind(word1, i)
        j = prevind(word2, j)
    end
    true
end;
----

[source,@julia-repl-test chap08]
----
julia> isreverse("pots", "stop")
i = 1
j = 4
i = 2
j = 3
i = 3
j = 2
i = 4
j = 1
i = 5
j = 0
ERROR: BoundsError: attempt to access "pots"
  at index [5]
----

This time a +BoundsError+ has been thrown. The value of +i+ is 5, which is out a range for the string +"pots"+.
(((BoundsError)))((("error", "Core", "BoundsError", see="BoundsError")))

==== Exercise 8-6

Run the program on paper, changing the values of +i+ and +j+ during each iteration. Find and fix the second error in this function.


=== Glossary

sequence::
An ordered collection of values where each value is identified by an integer index.
(((sequence)))

ASCII standard::
A character encoding standard for electronic communication specifying 128 characters.
(((ASCII standard)))

Unicode standard::
A computing industry standard for the consistent encoding, representation, and handling of text expressed in most of the world's writing systems.
(((Unicode standard)))

index::
An integer value used to select an item in a sequence, such as a character in a string. In Julia indices start from 1.
(((index)))

UTF-8 encoding::
A variable width character encoding capable of encoding all 1112064 valid code points in Unicode using one to four 8-bit bytes.
(((UTF-8 encoding)))

traverse::
To iterate through the items in a sequence, performing a similar operation on each.
(((traversal)))

slice::
A part of a string specified by a range of indices.
(((slice)))

empty string::
A string with no characters and length 0, represented by two quotation marks.
(((empty string)))

immutable::
The property of a sequence whose items cannot be changed.
(((immutable)))

string interpolation::
The process of evaluating a string containing one or more placeholders, yielding a result in which the placeholders are replaced with their corresponding values.
(((string interpolation)))

search::
A pattern of traversal that stops when it finds what it is looking for.
(((search)))

counter::
A variable used to count something, usually initialized to zero and then incremented.
(((counter)))


=== Exercises

[[ex08-1]]
==== Exercise 8-7

Read the documentation of the string functions at https://docs.julialang.org/en/v1/manual/strings/. You might want to experiment with some of them to make sure you understand how they work. +strip+ and +replace+ are particularly useful.

The documentation uses a syntax that might be confusing. For example, in +search(string::AbstractString, chars::Chars, [start::Integer])+, the brackets indicate optional arguments. So +string+ and +chars+ are required, but +start+ is optional.
(((search)))((("function", "Base", "search", see="search")))

[[ex08-2]]
==== Exercise 8-8

There is a built-in function called +count+ that is similar to the function in <<looping_and_counting>>. Read the documentation of this function and use it to count the number of +a+‚Äôs in "banana".
(((count)))((("function","Base", "count", see="count")))

[[ex08-3]]
==== Exercise 8-9

A string slice can take a third index. The first specifies the start, the third the end and the second the ‚Äústep size‚Äù; that is, the number of spaces between successive characters. A step size of 2 means every other character; 3 means every third, etc.
(((slice)))

[source,@julia-repl-test]
----
julia> fruit = "banana"
"banana"
julia> fruit[1:2:6]
"bnn"
----

A step size of -1 goes through the word backwards, so the slice +[end:-1:1]+ generates a reversed string.

Use this idiom to write a one-line version of +ispalindrome+ from <<ex06-3>>.
(((ispalindrome)))

[[ex08-4]]
==== Exercise 8-10

The following functions are all _intended_ to check whether a string contains any lowercase letters, but at least some of them are wrong. For each function, describe what the function actually does (assuming that the parameter is a string).

[source,@julia-setup]
----
function anylowercase1(s)
    for c in s
        if islowercase(c)
            return true
        else
            return false
        end
    end
end

function anylowercase2(s)
    for c in s
        if islowercase('c')
            return "true"
        else
            return "false"
        end
    end
end

function anylowercase3(s)
    for c in s
        flag = islowercase(c)
    end
    flag
end

function anylowercase4(s)
    flag = false
    for c in s
        flag = flag || islowercase(c)
    end
    flag
end

function anylowercase5(s)
    for c in s
        if !islowercase(c)
            return false
        end
    end
    true
end
----

[[ex08-5]]
==== Exercise 8-11

A Caesar cypher is a weak form of encryption that involves ‚Äúrotating‚Äù each letter by a fixed number of places. To rotate a letter means to shift it through the alphabet, wrapping around to the beginning if necessary, so +‚ÄôA‚Äô+ rotated by 3 is +‚ÄôD‚Äô+ and +‚ÄôZ‚Äô+ rotated by 1 is +‚ÄôA‚Äô+.
(((Caesar cypher)))

To rotate a word, rotate each letter by the same amount. For example, +"cheer"+ rotated by 7 is +"jolly"+ and +"melon"+ rotated by -10 is +"cubed"+. In the movie _2001: A Space Odyssey, the ship computer_ is called HAL, which is IBM rotated by -1.

Write a function called +rotateword+ that takes a string and an integer as parameters, and returns a new string that contains the letters from the original string rotated by the given amount.
(((rotateword)))((("function","programmer-defined", "rotateword", see="rotateword")))

[TIP]
====
You might want to use the built-in function +Int+, which converts a character to a numeric code, and +Char+, which converts numeric codes to characters. Letters of the alphabet are encoded in alphabetical order, so for example:
(((Int)))(((Char)))

[source,@julia-repl-test]
----
julia> Int('c') - Int('a')
2
----

Because +'c'+ is the third letter of the alphabet. But beware: the numeric codes for uppercase letters are different.

[source,@julia-repl-test]
----
julia> Char(Int('A') + 32)
'a': ASCII/Unicode U+0061 (category Ll: Letter, lowercase)
----
====

Potentially offensive jokes on the Internet are sometimes encoded in ROT13, which is a Caesar cypher with rotation 13. If you are not easily offended, find and decode some of them.
