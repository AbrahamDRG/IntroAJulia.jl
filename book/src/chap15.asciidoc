[[chap15]]
== Estructuras y Objetos

A esta altura, ya debe saber cómo usar funciones para tener un código más organizado, y los tipos integrados de Julia para organizar sus datos. El siguiente paso es aprender a construir sus propios tipos para organizar tanto el código como los datos. Este es un gran tema, y por lo tanto tomará un par de capítulos comprender todo.

=== Tipos Compuestos

Hemos utilizado muchos tipos integrados de Julia; ahora vamos a definir un nuevo tipo. A modo de ejemplo, crearemos un tipo llamado +Punto+ que represente un punto en un espacio bidimensional.
(((type)))(((Point)))((("type", "programmer-defined", "Point", see="Point")))

En notación matemática, los puntos a menudo se escriben entre paréntesis con una coma que separa las coordenadas. Por ejemplo, latexmath:[\(\left(0,0\right)\)] representa el origen, y latexmath:[\(\left(x,y\right)\)] representa el punto localizado latexmath:[\(x\)] unidades a la derecha y latexmath:[\(y\)] unidades hacia arriba del el origen.

Hay varias formas en que podríamos representar puntos del plano cartesiano en Julia:

* Podríamos almacenar las coordenadas por separado en dos variables, +x+ e +y+.

* Podríamos almacenar las coordenadas como elementos en una matriz o tupla.

* Podríamos crear un nuevo tipo para representar puntos como objetos.

Crear un nuevo tipo es más complicado que las otras opciones, pero tiene algunas ventajas que veremos pronto.

Un _tipo compuesto_ definido por el programador también se denomina _estructura_ (struct en inglés). La definición de +estructura+ de un punto se ve así:
(((composite type)))(((struct)))((("keyword", "struct", see="struct")))(((end)))

[source,@julia-setup chap15]
----
struct Punto
    x
    y
end
----

El encabezado indica que la nueva estructura se llama +Punto+. El cuerpo define los _atributos_ o _campos_ de la estructura. La estructura de +Punto+ tiene dos campos: +x+ e +y+.
(((attribute)))((("field", see="attribute")))

Una estructura es como una fábrica que crea objetos. Para crear un punto, debes llamar a +Punto+ como si fuera una función que tiene como argumentos los valores de los campos. Cuando +Punto+ se usa como una función, se llama _constructor_.
(((constructor)))

[source,@julia-repl-test chap15]
----
julia> p = Punto(3.0, 4.0)
Punto(3.0, 4.0)
----

El valor de retorno es una referencia a un objeto +Punto+, el cual asignamos a +p+.
(((reference)))

La creación de un nuevo objeto se llama _instanciación_, y el objeto creado es una _instancia_ del tipo Punto.
(((instatiation)))(((instance)))

Cuando imprime una instancia, Julia le dice a qué tipo pertenece y cuáles son los valores de los atributos.

Cada objeto es una instancia de algún tipo, por lo que "objeto" e "instancia" son intercambiables. Pero en este capítulo se utiliza "instancia" para indicar que hablamos de un tipo definido por el programador.

Un diagrama de estado que muestra un objeto y sus campos se denomina _diagrama de objeto_; ver <<fig15-1>>.
(((object diagram)))((("diagram", "object", see="object diagram")))

[[fig15-1]]
.Object diagram
image::images/fig151.svg[]


=== Structs are Immutable

You can get the values of the fields using +.+ notation:
(((.)))((("dot notation", see=".")))

[source,@julia-repl-test chap15]
----
julia> x = p.x
3.0
julia> p.y
4.0
----

The expression +p.x+ means, “Go to the object +p+ refers to and get the value of +x+.” In the example, we assign that value to a variable named +x+. There is no conflict between the variable +x+ and the field +x+.

You can use dot notation as part of any expression. For example:

[source,@julia-repl-test chap15]
----
julia> distance = sqrt(p.x^2 + p.y^2)
5.0
----

Structs are however by default immutable, after construction the fields can not change value:
(((immutable)))

[source,@julia-repl-test chap15]
----
julia> p.y = 1.0
ERROR: setfield! immutable struct of type Point cannot be changed
----

This may seem odd at first, but it has several advantages:

* It can be more efficient.

* It is not possible to violate the invariants provided by the type's constructors (see <<constructor>>).

* Code using immutable objects can be easier to reason about.


=== Mutable Structs

Where required, mutable composite types can be declared with the keyword +mutable struct+. Here is the definition of a mutable point:
(((mutable composite type)))(((mutable struct)))((("keyword", "mutable struct", see="mutable struct")))(((MPoint)))((("type", "programmer-defined", "MPoint", see="MPoint")))

[source,@julia-setup chap15]
----
mutable struct MPoint
    x
    y
end
----

You can assign values to an instance of a mutable struct using dot notation:
(((.)))

[source,@julia-repl-test chap15]
----
julia> blank = MPoint(0.0, 0.0)
MPoint(0.0, 0.0)
julia> blank.x = 3.0
3.0
julia> blank.y = 4.0
4.0
----


=== Rectangles

Sometimes it is obvious what the fields of an object should be, but other times you have to make decisions. For example, imagine you are designing a type to represent rectangles. What fields would you use to specify the location and size of a rectangle? You can ignore angle; to keep things simple, assume that the rectangle is either vertical or horizontal.

There are at least two possibilities:

* You could specify one corner of the rectangle (or the center), the width, and the height.

* You could specify two opposing corners.

At this point it is hard to say whether either is better than the other, so we’ll implement the first one, just as an example.
(((Rectangle)))((("type", "programmer-defined", "Rectangle", see="Rectangle")))

[source,@julia-setup chap15]
----
"""
Represents a rectangle.

fields: width, height, corner.
"""
struct Rectangle
    width
    height
    corner
end
----

The docstring lists the fields: width and height are numbers; corner is a +Point+ object that specifies the lower-left corner.
(((docstring)))

To represent a rectangle, you have to instantiate a +Rectangle+ object:

[source,@julia-repl-test chap15]
----
julia> origin = MPoint(0.0, 0.0)
MPoint(0.0, 0.0)
julia> box = Rectangle(100.0, 200.0, origin)
Rectangle(100.0, 200.0, MPoint(0.0, 0.0))
----

<<fig15-2>> shows the state of this object. An object that is a field of another object is _embedded_. Because the +corner+ attribute refers to a mutable object, the latter is drawn outside the +Rectangle+ object.
(((embedded)))(((object diagram)))

[[fig15-2]]
.Object diagram
image::images/fig152.svg[]


=== Instances as Arguments

You can pass an instance as an argument in the usual way. For example:
(((printpoint)))((("function", "programmer-defined", "printpoint", see="printpoint")))

[source,@julia-setup chap15]
----
function printpoint(p)
    println("($(p.x), $(p.y))")
end
----

+printpoint+ takes a +Point+ as an argument and displays it in mathematical notation. To invoke it, you can pass +p+ as an argument:

[source,@julia-repl-test chap15]
----
julia> printpoint(blank)
(3.0, 4.0)
----

==== Exercise 15-1

Write a function called +distancebetweenpoints+ that takes two points as arguments and returns the distance between them.
(((distancebetweenpoints)))((("function", "programmer-defined", "distancebetweenpoints", see="distancebetweenpoints")))

If a mutable struct object is passed to a function as an argument, the function can modify the fields of the object. For example, +movepoint!+ takes a mutable +Point+ object and two numbers, +dx+ and +dy+, and adds the numbers to respectively the +x+ and the +y+ attribute of the +Point+:
(((movepoint!)))((("function", "programmer-defined", "movepoint!", see="movepoint!")))

[source,@julia-setup chap15]
----
function movepoint!(p, dx, dy)
    p.x += dx
    p.y += dy
    nothing
end
----

Here is an example that demonstrates the effect:

[source,@julia-repl-test chap15]
----
julia> origin = MPoint(0.0, 0.0)
MPoint(0.0, 0.0)
julia> movepoint!(origin, 1.0, 2.0)

julia> origin
MPoint(1.0, 2.0)
----

Inside the function, +p+ is an alias for +origin+, so when the function modifies +p+, +origin+ changes.
(((aliasing)))

Passing an immutable +Point+ object to +movepoint!+ causes an error:

[source,@julia-repl-test chap15]
----
julia> movepoint!(p, 1.0, 2.0)
ERROR: setfield! immutable struct of type Point cannot be changed
----

You can however modify the value of a mutable attribute of an immutable object. For example, +moverectangle!+ has as arguments a +Rectangle+ object and two numbers, +dx+ and +dy+, and uses +movepoint!+ to move the corner of the rectangle:

[source,@julia-setup chap15]
----
function moverectangle!(rect, dx, dy)
  movepoint!(rect.corner, dx, dy)
end
----

Now +p+ in +movepoint!+ is an alias for +rect.corner+, so when +p+ is modified, +rect.corner+ changes also:

[source,@julia-repl-test chap15]
----
julia> box
Rectangle(100.0, 200.0, MPoint(0.0, 0.0))
julia> moverectangle!(box, 1.0, 2.0)

julia> box
Rectangle(100.0, 200.0, MPoint(1.0, 2.0))
----

[WARNING]
====
You cannot reassign a mutable attribute of an immutable object:
(((reassignment)))

[source,@julia-repl-test chap15]
----
julia> box.corner = MPoint(1.0, 2.0)
ERROR: setfield! immutable struct of type Rectangle cannot be changed
----
====

=== Instances as Return Values

Functions can return instances. For example, +findcenter+ takes a +Rectangle+ as an argument and returns a +Point+ that contains the coordinates of the center of the rectangle:
(((findcenter)))((("function", "programmer-defined", "findcenter", see="findcenter")))

[source,@julia-setup chap15]
----
function findcenter(rect)
    Point(rect.corner.x + rect.width / 2, rect.corner.y + rect.height / 2)
end
----

The expression +rect.corner.x+ means, “Go to the object +rect+ refers to and select the field named +corner+; then go to that object and select the field named +x+.”

Here is an example that passes +box+ as an argument and assigns the resulting +Point+ to +center+:

[source,@julia-repl-test chap15]
----
julia> center = findcenter(box)
Point(51.0, 102.0)
----


=== Copying

Aliasing can make a program difficult to read because changes in one place might have unexpected effects in another place. It is hard to keep track of all the variables that might refer to a given object.
(((aliasing)))

Copying an object is often an alternative to aliasing. Julia provides a function called +deepcopy+ that can duplicate any object:
(((copying)))(((deepcopy)))((("function", "Base", "deepcopy", see="deepcopy")))(((deep copy)))

[source,@julia-repl-test chap15]
----
julia> p1 = MPoint(3.0, 4.0)
MPoint(3.0, 4.0)
julia> p2 = deepcopy(p1)
MPoint(3.0, 4.0)
julia> p1 ≡ p2
false
julia> p1 == p2
false
----

The +≡+ operator indicates that +p1+ and +p2+ are not the same object, which is what we expected. But you might have expected +==+ to yield +true+ because these points contain the same data. In that case, you will be disappointed to learn that for mutable objects, the default behavior of the +==+ operator is the same as the +===+ operator; it checks object identity, not object equivalence. That’s because for mutable composite types, Julia doesn’t know what should be considered equivalent. At least, not yet.
(((==)))(((≡)))

==== Exercise 15-2

Create a +Point+ instance, make a copy of it and check the equivalence and the egality of both. The result can surprise you but it explains why aliasing is a non issue for an immutable object.


=== Debugging

When you start working with objects, you are likely to encounter some new exceptions. If you try to access a field that doesn’t exist, you get:
(((debugging)))

[source,@julia-repl-test chap15]
----
julia> p = Point(3.0, 4.0)
Point(3.0, 4.0)
julia> p.z = 1.0
ERROR: type Point has no field z
----

If you are not sure what type an object is, you can ask:
(((typeof)))

[source,@julia-repl-test chap15]
----
julia> typeof(p)
Point
----

You can also use +isa+ to check whether an object is an instance of a type:
(((isa)))((("operator", "Base", "isa", see="isa")))

[source,@julia-repl-test chap15]
----
julia> p isa Point
true
----

If you are not sure whether an object has a particular attribute, you can use the built-in function +fieldnames+:
(((deepcopy)))((("function", "Base", "deepcopy", see="deepcopy")))

[source,@julia-repl-test chap15]
----
julia> fieldnames(Point)
(:x, :y)
----

or the function +isdefined+:
(((isdefined)))((("function", "Base", "isdefined", see="isdefined")))

[source,@julia-repl-test chap15]
----
julia> isdefined(p, :x)
true
julia> isdefined(p, :z)
false
----

The first argument can be any object; the second argument is a symbol, +:+ followed by the name of the field.
(((:)))(((Symbol)))((("type", "Base", "Symbol", see="Symbol")))

=== Glossary

struct::
A composite type. 
(((struct)))

constructor::
A function with the same name as a type that creates instances of the type.
(((constructor)))

instance::
An object that belongs to a type.
(((instance)))

instantiate::
To create a new object.
(((instantiate)))

attribute or field::
One of the named values associated with an object.
(((attribute)))

embedded object::
An object that is stored as a field of another object.
(((embedded object)))

deep copy::
To copy the contents of an object as well as any embedded objects, and any objects embedded in them, and so on; implemented by the +deepcopy+ function.
(((deep copy)))

object diagram::
A diagram that shows objects, their fields, and the values of the fields.
(((object diagram)))


=== Exercises

[[ex15-1]]
==== Exercise 15-3

. Write a definition for a type named +Circle+ with fields +center+ and +radius+, where +center+ is a +Point+ object and +radius+ is a number.
(((Circle)))((("type", "programmer-defined", "Circle", see="Circle")))

. Instantiate a circle object that represents a circle with its center at latexmath:[\(\left(150, 100\right)\)] and radius 75.

. Write a function named +pointincircle+ that takes a +Circle+ object and a +Point+ object and returns +true+ if the point lies in or on the boundary of the circle.
(((pointincircle)))((("function", "programmer-defined", "pointincircle", see="pointincircle")))

. Write a function named +rectincircle+ that takes a +Circle+ object and a +Rectangle+ object and returns +true+ if the rectangle lies entirely in or on the boundary of the circle.
(((rectincircle)))((("function", "programmer-defined", "rectincircle", see="rectincircle")))

. Write a function named +rectcircleoverlap+ that takes a +Circle+ object and a +Rectangle+ object and returns +true+ if any of the corners of the rectangle fall inside the circle. Or as a more challenging version, return +true+ if any part of the rectangle falls inside the circle.
(((rectcircleoverlap)))((("function", "programmer-defined", "rectcircleoverlap", see="rectcircleoverlap")))

[[ex15-2]]
==== Exercise 15-4

. Write a function called +drawrect+ that takes a turtle object and a +Rectangle+ object and uses the turtle to draw the rectangle. See Chapter 4 for examples using +Turtle+ objects.
(((drawrect)))((("function", "programmer-defined", "drawrect", see="drawrect")))

. Write a function called +drawcircle+ that takes a +Turtle+ object and a +Circle+ object and draws the circle.
(((drawcircle)))((("function", "programmer-defined", "drawcircle", see="drawcircle")))

