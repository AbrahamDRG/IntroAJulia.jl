[[chap16]]
== Estructuras y Funciones

Ahora que sabemos cómo crear tipos compuestos, el siguiente paso es escribir funciones que tomen objetos definidos por el programador como parámetros, y que los devuelvan como resultados. En este capítulo también se presenta el "estilo de programación funcional" y dos nuevas formas de desarrollar programas.

[[time]]
=== Tiempo

Como otro ejemplo más de tipo compuesto, definiremos una +estructura+ llamada +Hora+ que registra la hora del día. La definición de esta estructura se muestra a continuación:
(((MyTime)))((("type", "programmer-defined", "MyTime", see="MyTime")))

[source,@julia-setup chap16]
----
"""
Representa la hora del día.

atributos: hora, minuto, segundo
"""
struct Hora
    hora
    minuto
    segundo
end
----

Observación: +Time+ es una palabra reservada de Julia. 
(((Time)))((("type", "Dates", "Time", see="Time")))

[source,@julia-repl-test chap16]
----
julia> hora = Hora(11, 59, 30)
Hora(11, 59, 30)
----

El diagrama de objetos para el objeto +Hora+ luce así <<fig16-1>>.

[[fig16-1]]
.Object diagram
image::images/fig161.svg[]

==== Ejercicio 16-1

Escriba una función llamada +imprimirhora+ que tome un objeto +Hora+ y lo imprima con el formato +hora:minuto:segundo+. +Printf+, de la macro +@printf+ del módulo StdLib, imprime un número entero con el formato `"%02d"` (utiliza al menos dos dígitos), incluido un cero inicial si es necesario.
(((printtime)))((("function", "programmer-defined", "printtime", see="printtime")))

==== Ejercicio 16-2

Escriba una función booleana llamada +estadespues+ que tome dos objetos +Hora+: +t1+ y +t2+, y devuelva +true+ si la hora +t1+ es más tarde que +t2+, y +false+ de lo contrario. Desafío: no use una sentencia +if+.
(((isafter)))((("function", "programmer-defined", "isafter", see="isafter")))


=== Funciones Puras

En las siguientes secciones, escribiremos dos versiones de una función que calcula la suma de horas. A través de ellas se mostrarán dos tipos de funciones: funciones puras y modificadores. También permitirán mostrar un nuevo plan de desarrollo de programa que llamaremos _prototipo y parche_, que es una forma de abordar un problema complejo comenzando con un prototipo simple y lidiando gradualmente con las complicaciones.
(((pure function)))(((prototype and patch)))

Este es un esbozo de +sumahora+:
(((addtime)))((("function", "programmer-defined", "addtime", see="addtime")))

[source,@julia-setup chap16]
----
function sumahora(t1, t2)
    Hora(t1.hora + t2.hora, t1.minuto + t2.minuto, t1.segundo + t2.segundo)
end
----

La función crea un nuevo objeto +Hora+, inicializa sus atributos y devuelve una referencia al nuevo objeto. A esto se le llama _función pura_ porque no modifica ninguno de los objetos que se le pasan como argumento, y no tiene efectos (como mostrar un valor o tomar una entrada del usuario) más que devolver un valor.

Para probar esta función, crearemos dos objetos +Hora+: +inicio+, que contiene la hora de inicio de una película, como _Roma_, y +duracion+, que contiene el tiempo de ejecución de la película, que es dos horas y 15 minutos.

+sumahora+ calcula cuándo se terminará la película.

+addtime+ figures out when the movie will be done.

[source,@julia-eval chap16]
----
using Printf
function imprimirhora(tiempo::Hora)
    @printf("%02d:%02d:%02d", tiempo.hora, tiempo.minuto, tiempo.segundo)
end;
----

[source,@julia-repl-test chap16]
----
julia> inicio = Hora(9, 50, 0);

julia> duracion = Hora(2, 15, 0);

julia> finaliza = sumahora(inicio, duracion);

julia> imprimirhora(finaliza)
11:65:00
----

El resultado +11:65:00+ no es lo que queríamos. El problema es que esta función no se ocupa de los casos en los que el número de segundos o minutos suma más que sesenta. Cuando ocurre eso, debemos tomar los segundos sobrantes y "llevarlos" a la columna de los minutos, o los minutos extras a la columna de las horas. He aquí una versión corregida de la función:

[source,@julia-setup chap16]
----
function sumahora(t1, t2)
    segundo = t1.segundo + t2.segundo
    minuto = t1.minuto + t2.minuto
    hora = t1.hora + t2.hora
    if segundo >= 60
        segundo -= 60
        minuto += 1
    end
    if minuto >= 60
        minuto -= 60
        hora += 1
    end
    Hora(hora, minuto, segundo)
end
----

Aunque esta función es correcta, es muy larga. Más adelante veremos una alternativa más corta.

[[modifiers]]
=== Modificadores

Hay veces en las que es útil que una función modifique uno o más de los objetos que recibe como parámetros. En ese caso, los cambios son visibles para el que hizo la llamada. Las funciones que trabajan así se llaman _modificadores_.
(((modifier)))

La función +incrementar!+, que agrega un número dado de segundos a un objeto +Hora+, puede escribirse naturalmente como un modificador. Aquí mostramos un esbozo rápido de la función:
(((increment!)))((("function", "programmer-defined", "increment!", see="increment!")))

[source,@julia-setup chap16]
----
function incrementar!(tiempo, segundos)
    tiempo.segundo += segundos
    if tiempo.segundo >= 60
        tiempo.segundo -= 60
        tiempo.minute += 1
    end
    if tiempo.minuto >= 60
        tiempo.minuto -= 60
        tiempo.hora += 1
    end
end
----

La primera línea realiza la operación de suma de los segundos; las restantes se ocupan de los casos especiales que vimos antes.

¿Es correcta esta función? ¿Qué ocurre si el parámetro +segundos+ es mucho mayor que sesenta?

En tal caso, no es suficiente con acarrear una vez; debemos seguir haciéndolo hasta que +tiempo.segundo+ sea menor que sesenta. Una solución es sustituir las sentencias +if+ por sentencias +while+. Ahora esta función es correcta, pero no es la solución más eficiente.

==== Exercise 16-3

Write a correct version of +increment!+ that doesn’t contain any loops.

Anything that can be done with modifiers can also be done with pure functions. In fact, some programming languages only allow pure functions. There is some evidence that programs that use pure functions are faster to develop and less error-prone than programs that use modifiers. But modifiers are convenient at times, and functional programs tend to be less efficient.

In general, I recommend that you write pure functions whenever it is reasonable and resort to modifiers only if there is a compelling advantage. This approach might be called a _functional programming style_.
(((functional programming style)))

==== Exercise 16-4

Write a “pure” version of +increment+ that creates and returns a new +MyTime+ object rather than modifying the parameter.


[[prototyping_versus_planning]]
=== Prototyping Versus Planning

The development plan I am demonstrating is called “prototype and patch”. For each function, I wrote a prototype that performed the basic calculation and then tested it, patching errors along the way.
(((program development plan)))(((prototyping and patch)))

This approach can be effective, especially if you don’t yet have a deep understanding of the problem. But incremental corrections can generate code that is unnecessarily complicated—since it deals with many special cases—and unreliable—since it is hard to know if you have found all the errors.

An alternative is _designed development_, in which high-level insight into the problem can make the programming much easier. In this case, the insight is that a Time object is really a three-digit number in base 60 (see https://en.wikipedia.org/wiki/Sexagesimal)! The second attribute is the “ones column”, the minute attribute is the “sixties column”, and the hour attribute is the “thirty-six hundreds column”.
(((designed development)))

When we wrote +addtime+ and +increment!+, we were effectively doing addition in base 60, which is why we had to carry from one column to the next.

This observation suggests another approach to the whole problem—we can convert +MyTime+ objects to integers and take advantage of the fact that the computer knows how to do integer arithmetic.

Here is a function that converts mytimes to integers:
(((timetoint)))((("function", "programmer-defined", "timetoint", see="timetoint")))

[source,@julia-setup chap16]
----
function timetoint(time)
    minutes = time.hour * 60 + time.minute
    seconds = minutes * 60 + time.second
end
----

And here is a function that converts an integer to a +MyTime+ (recall that +divrem+ divides the first argument by the second and returns the quotient and remainder as a tuple):
(((inttotime)))((("function", "programmer-defined", "inttotime", see="inttotime")))

[source,@julia-setup chap16]
----
function inttotime(seconds)
    (minutes, second) = divrem(seconds, 60)
    hour, minute = divrem(minutes, 60)
    MyTime(hour, minute, second)
end
----


You might have to think a bit, and run some tests, to convince yourself that these functions are correct. One way to test them is to check that +timetoint(inttotime(x)) == x+ for many values of +x+. This is an example of a consistency check.

Once you are convinced they are correct, you can use them to rewrite +addtime+:

[source,@julia-setup chap16]
----
function addtime(t1, t2)
    seconds = timetoint(t1) + timetoint(t2)
    inttotime(seconds)
end
----

This version is shorter than the original, and easier to verify. 

==== Exercise 16-5

Rewrite +increment!+ using +timetoint+ and +inttotime+.

In some ways, converting from base 60 to base 10 and back is harder than just dealing with times. Base conversion is more abstract; our intuition for dealing with time values is better.

But if we have the insight to treat times as base 60 numbers and make the investment of writing the conversion functions (+timetoint+ and +inttotime+), we get a program that is shorter, easier to read and debug, and more reliable.

It is also easier to add features later. For example, imagine subtracting two +MyTime+s to find the duration between them. The naive approach would be to implement subtraction with borrowing. Using the conversion functions would be easier and more likely to be correct.

Ironically, sometimes making a problem harder (or more general) makes it easier (because there are fewer special cases and fewer opportunities for error).

[[chap16_debugging]]
=== Debugging

A +MyTime+ object is well-formed if the values of +minute+ and +second+ are between 0 and 60 (including 0 but not 60) and if +hour+ is positive. +hour+ and +minute+ should be integral values, but we might allow +second+ to have a fraction part.
(((debugging)))

Requirements like these are called _invariants_ because they should always be true. To put it a different way, if they are not true, something has gone wrong.
(((invariant)))

Writing code to check invariants can help detect errors and find their causes. For example, you might have a function like +isvalidtime+ that takes a +MyTime+ object and returns +false+ if it violates an invariant:
(((isvalidtime)))((("function", "programmer-defined", "isvalidtime", see="isvalidtime")))

[source,@julia-setup chap16]
----
function isvalidtime(time)
    if time.hour < 0 || time.minute < 0 || time.second < 0
        return false
    end
    if time.minute >= 60 || time.second >= 60
        return false
    end
    true
end
----

At the beginning of each function you could check the arguments to make sure they are valid:
(((addtime)))(((error)))

[source,@julia-setup chap16]
----
function addtime(t1, t2)
    if !isvalidtime(t1) || !isvalidtime(t2)
        error("invalid MyTime object in add_time")
    end
    seconds = timetoint(t1) + timetoint(t2)
    inttotime(seconds)
end
----

Or you could use an +@assert+ macro, which checks a given invariant and throws an exception if it fails:
(((@assert)))((("macro", "Base", "@assert", see="@assert")))

[source,@julia-setup chap16]
----
function addtime(t1, t2)
    @assert(isvalidtime(t1) && isvalidtime(t2), "invalid MyTime object in add_time")
    seconds = timetoint(t1) + timetoint(t2)
    inttotime(seconds)
end
----

+@assert+ macros are useful because they distinguish code that deals with normal conditions from code that checks for errors.


=== Glossary

prototype and patch::
A development plan that involves writing a rough draft of a program, testing, and correcting errors as they are found.
(((prototype and patch)))

designed development::
A development plan that involves high-level insight into the problem and more planning than incremental development or prototype development.
(((designed development)))

pure function::
A function that does not modify any of the objects it receives as arguments. Most pure functions are fruitful.
(((pure function)))

modifier::
A function that changes one or more of the objects it receives as arguments. Most modifiers are void; that is, they return +nothing+.
(((modifier)))

functional programming style::
A style of program design in which the majority of functions are pure.
(((functional programming style)))

invariant::
A condition that should never change during the execution of a program.
(((invariant)))


=== Exercises

[[ex16-1]]
==== Exercise 16-6

Write a function called +multime+ that takes a +MyTime+ object and a number and returns a new +MyTime+ object that contains the product of the original +MyTime+ and the number.
(((multime)))((("function", "programmer-defined", "multime", see="multime")))

Then use +multime+ to write a function that takes a +MyTime+ object that represents the finishing time in a race, and a number that represents the distance, and returns a +MyTime+ object that represents the average pace (time per mile).

[[ex16-2]]
==== Exercise 16-7

Julia provides time objects that are similar to the +MyTime+ objects in this chapter, but they provide a rich set of function and operators. Read the documentation at https://docs.julialang.org/en/v1/stdlib/Dates/.

. Write a program that gets the current date and prints the day of the week.

. Write a program that takes a birthday as input and prints the user’s age and the number of days, hours, minutes and seconds until their next birthday.

. For two people born on different days, there is a day when one is twice as old as the other. That’s their Double Day. Write a program that takes two birthdays and computes their Double Day.

. For a little more challenge, write the more general version that computes the day when one person is latexmath:[\(n\)] times older than the other.

