[[chap04]]
== Estudio de Caso: Dise√±o de Interfaz

Este cap√≠tulo presenta un segundo estudio de caso, que muestra el proceso de dise√±ar funciones que trabajen en conjunto.

Se presentan gr√°ficos turtle, que es una forma de crear dibujos a trav√©s de la programaci√≥n. Los gr√°ficos turtle no est√°n incluidos en la Biblioteca Est√°ndar, por lo que se debe agregar el m√≥dulo PiensaEnJulia a su configuraci√≥n de Julia.

Los ejemplos de este cap√≠tulo se pueden ejecutar en un notebook gr√°fico en JuliaBox, el cual combina c√≥digo, texto formateado, matem√°ticas y multimedia en un solo documento (vea <<juliabox>>).
(((JuliaBox, graphical notebook)))


=== Turtles

Un _modulo_ es un archivo que contiene una colecci√≥n de funciones relacionadas. Julia proporciona algunos m√≥dulos en su Biblioteca Est√°ndar. Adem√°s, es posible agregar m√°s funciones a una gran cantidad de _paquetes_ (https://juliaobserver.com).
(((module)))(((package)))

Los paquetes se pueden instalar en REPL ingresando al modo Pkg REPL con la tecla +]+.
(((pass:[&#93;])))(((PiensaEnJulia)))((("module", "PiensaEnJulia", see="PiensaEnJulia")))

[source,jlcon]
----
(v1.2) pkg> add https://github.com/PiensaEnJulia/PiensaEnJulia.jl
----

Esto puede demorar un poco.

Antes de que podamos usar las funciones de un m√≥dulo, tenemos que importarlo con una sentencia +using+:
(((using)))((("keyword", "using", see="using")))(((using statement)))((("statement", "using", see="using statement")))

[source,@julia-repl-test]
----
julia> using PiensaEnJulia

julia> üê¢ = Turtle()
Luxor.Turtle(0.0, 0.0, true, 0.0, (0.0, 0.0, 0.0))
----

El m√≥dulo +PiensaEnJulia+ proporciona una funci√≥n llamada +Turtle+ (tortuga en espa√±ol) que crea un objeto +Luxor.Turtle+, el cual asignamos a una variable llamada +üê¢+ (*+\:turtle: TAB+*).
(((Turtle)))((("type", "Luxor", "Turtle", see="Turtle")))

Una vez que crea una tortuga, puede llamar a una funci√≥n para "moverla", y as√≠ hacer un dibujo con ella. Por ejemplo, para mover la tortuga hacia adelante (forward en ingl√©s):
(((forward)))((("function", "PiensaEnJulia", "forward", see="forward")))

[source,julia]
----
@svg begin
    forward(üê¢, 100)
end
----

[[fig04-1]]
.Moving the turtle forward
image::images/fig41.svg[]


La palabra reservada +@svg+ ejecuta una macro que dibuja una imagen SVG. Las macros son una caracter√≠stica importante pero avanzada de Julia.
(((@svg)))((("macro", "Luxor", "@svg", see="@svg")))(((macro)))(((SVG picture)))

Los argumentos de +forward+ son la tortuga y una distancia en p√≠xeles, por lo que el tama√±o real depende de su pantalla.

Tambi√©n es posible hacer girar a la tortuga con la funci√≥n +turn+. Los argumentos de esta funci√≥n son la tortuga y un √°ngulo en grados.
(((turn)))((("function", "PiensaEnJulia", "turn", see="turn")))

Adem√°s, cada tortuga est√° sosteniendo un l√°piz, que puede estar hacia arriba o hacia abajo; si el l√°piz est√° hacia abajo, la tortuga deja un rastro cuando se mueve. <<fig04-1>> muestra el rastro dejado por la tortuga. Las funciones +penup+ y +pendown+ significan "l√°piz hacia arriba" y "l√°piz hacia abajo".
(((penup)))((("function", "PiensaEnJulia", "penup", see="penup")))(((pendown)))((("function", "PiensaEnJulia", "pendown", see="pendown")))

Para dibujar un √°ngulo recto, modifique la llamada a la macro:

[source,julia]
----
üê¢ = Turtle()
@svg begin
    forward(üê¢, 100)
    turn(üê¢, -90)
    forward(üê¢, 100)
end
----

==== Ejercicio 4-1

Ahora modifique la macro para que dibuje un cuadrado. ¬°No sigas hasta haberlo terminado!


[[simple_repetition]]
=== Repetici√≥n Simple

Es probable que hayas escrito algo como esto:
(((repetition)))

[source,julia]
----
üê¢ = Turtle()
@svg begin
    forward(üê¢, 100)
    turn(üê¢, -90)
    forward(üê¢, 100)
    turn(üê¢, -90)
    forward(üê¢, 100)
    turn(üê¢, -90)
    forward(üê¢, 100)
end
----

Podemos hacer lo mismo de manera m√°s concisa con una sentencia +for+:
(((for statement)))((("statement", "for", see="for statement)))(((for)))((("keyword", "for", see="for")))(((in)))((("keyword", "in", see="in")))

[source,@julia-repl-test]
----
julia> for i in 1:4
          println("¬°Hola!")
       end
¬°Hola!
¬°Hola!
¬°Hola!
¬°Hola!
----

Este es el uso m√°s simple de la sentencia +for+; veremos m√°s usos despu√©s. Pero esto deber√≠a ser suficiente para reescribir su programa que dibuja un cuadrado. No contin√∫es hasta que lo hagas.

Aqu√≠ hay una sentencia +for+ que dibuja un cuadrado:

[source,julia]
----
üê¢ = Turtle()
@svg begin
    for i in 1:4
        forward(üê¢, 100)
        turn(üê¢, -90)
    end
end
----

La sintaxis de una sentencia +for+ es similar a la definici√≥n de una funci√≥n. Tiene un encabezado y un cuerpo que termina con la palabra reservada +end+. El cuerpo puede contener el n√∫mero de sentencias que desee.
(((end)))

Una sentencia +for+ tambi√©n es llamada _bucle_ porque el flujo de ejecuci√≥n recorre el cuerpo y luego vuelve a la parte superior. En este caso, ejecuta el cuerpo cuatro veces.
(((loop)))

Esta versi√≥n es en realidad un poco diferente del c√≥digo anterior que dibujaba un cuadrado porque hace otro giro despu√©s de dibujar el √∫ltimo lado del cuadrado. El giro adicional lleva m√°s tiempo, pero simplifica el c√≥digo si hacemos lo mismo en cada iteraci√≥n del ciclo. Esta versi√≥n tambi√©n tiene el efecto de dejar a la tortuga nuevamente en la posici√≥n inicial, mirando hacia la direcci√≥n inicial.

=== Ejercicios

Los siguientes ejercicios usan tortugas. Son divertidos, pero tambi√©n tienen un trasfondo. Mientras trabaja en ellos, piense cu√°l es este trasfondo.

[TIP]
====
Las siguientes secciones muestran las soluciones para estos ejercicios, as√≠ que no mire hasta que haya terminado (o al menos lo haya intentado).
====

[[ex04-1]]
==== Ejercicio 4-2

Escriba una funci√≥n llamada +cuadrado+ que tome como par√°metro a un turtle +t+. Deber√≠a usar este turtle para dibujar un cuadrado.

[[ex04-2]]
==== Ejercicio 4-3

Escriba una llamada a funci√≥n que pase +t+ como argumento a +cuadrado+, y luego vuelva a ejecutar la macro.

[[ex04-3]]
==== Ejercicio 4-4

Agregue otro par√°metro, llamado +len+, a cuadrado. Modifique el cuerpo para que la longitud de los lados sea +len+, y luego modifique la llamada a funci√≥n agregando este segundo argumento. Ejecute la macro nuevamente. Prueba con un rango de valores para +len+.

[[ex04-4]]
==== Ejercicio 4-5

Haga una copia de +cuadrado+ y cambie su nombre a +pol√≠gono+. Agregue otro par√°metro llamado +n+ y modifique el cuerpo para que dibuje un pol√≠gono regular de latexmath:[\(n\)]-lados.

[TIP]
====
Los √°ngulos exteriores de un pol√≠gono regular de latexmath:[\(n\)]-lados son latexmath:[\(\frac{360}{n}\)] grados.
====

[[ex04-5]]
==== Ejercicio 4-6

Escriba una funci√≥n llamada +c√≠rculo+ que tome un turtle +t+, y un radio +r+, como par√°metros y que dibuje un c√≠rculo aproximado llamando a + pol√≠gono + con una longitud y n√∫mero de lados apropiados. Pruebe su funci√≥n con un rango de valores de + r +.

Write a function called +circle+ that takes a turtle, +t+, and radius, +r+, as parameters and that draws an approximate circle by calling +polygon+ with an appropriate length and number of sides. Test your function with a range of values of +r+. 

[TIP]
====
Figure out the circumference of the circle and make sure that +len * n == circumference+.
====

[[ex04-6]]
==== Ejercicio 4-7

Make a more general version of +circle+ called +arc+ that takes an additional parameter +angle+, which determines what fraction of a circle to draw. +angle+ is in units of degrees, so when +angle = 360+, +arc+ should draw a complete circle.


=== Encapsulation

The first exercise asks you to put your square-drawing code into a function definition and then call the function, passing the turtle as a parameter. Here is a solution:
(((square)))((("function", "programmer-defined", "square", see="square")))

[source,julia]
----
function square(t)
    for i in 1:4
        forward(t, 100)
        turn(t, -90)
    end
end
üê¢ = Turtle()
@svg begin
    square(üê¢)
end
----

The innermost statements, +forward+ and +turn+ are indented twice to show that they are inside the +for+ loop, which is inside the function definition.
(((indentation)))

Inside the function, +t+ refers to the same turtle +üê¢+, so +turn(t, -90)+ has the same effect as +turn(üê¢, -90)+. In that case, why not call the parameter +üê¢+? The idea is that +t+ can be any turtle, not just +üê¢+, so you could create a second turtle and pass it as an argument to +square+:

[source,julia]
----
üê´ = Turtle()
@svg begin
    square(üê´)
end
----

Wrapping a piece of code up in a function is called _encapsulation_. One of the benefits of encapsulation is that it attaches a name to the code, which serves as a kind of documentation. Another advantage is that if you re-use the code, it is more concise to call a function twice than to copy and paste the body!
(((encapsulation)))


=== Generalization

The next step is to add a +len+ parameter to +square+. Here is a solution:
(((square)))

[source,julia]
----
function square(t, len)
    for i in 1:4
        forward(t, len)
        turn(t, -90)
    end
end
üê¢ = Turtle()
@svg begin
    square(üê¢, 100)
end
----

Adding a parameter to a function is called _generalization_ because it makes the function more general: in the previous version, the square is always the same size; in this version it can be any size.
(((generalization)))

The next step is also a generalization. Instead of drawing squares, +polygon+ draws regular polygons with any number of sides. Here is a solution:
(((polygon)))((("function", "programmer-defined", "polygon", see="polygon")))

[source,julia]
----
function polygon(t, n, len)
    angle = 360 / n
    for i in 1:n
        forward(t, len)
        turn(t, -angle)
    end
end
üê¢ = Turtle()
@svg begin
    polygon(üê¢, 7, 70)
end
----

This example draws a 7-sided polygon with side length 70.


=== Interface Design

The next step is to write +circle+, which takes a radius, +r+, as a parameter. Here is a simple solution that uses +polygon+ to draw a 50-sided polygon:
(((circle)))((("function", "programmer-defined", "circle", see="circle")))

[source,julia]
----
function circle(t, r)
    circumference = 2 * œÄ * r
    n = 50
    len = circumference / n
    polygon(t, n, len)
end
----

The first line computes the circumference of a circle with radius latexmath:[\(r\)] using the formula latexmath:[\(2 \pi r\)]. +n+ is the number of line segments in our approximation of a circle, so +len+ is the length of each segment. Thus, +polygon+ draws a 50-sided polygon that approximates a circle with radius +r+.

One limitation of this solution is that +n+ is a constant, which means that for very big circles, the line segments are too long, and for small circles, we waste time drawing very small segments. One solution would be to generalize the function by taking +n+ as a parameter. This would give the user (whoever calls circle) more control, but the interface would be less clean.

The _interface_ of a function is a summary of how it is used: what are the parameters? What does the function do? And what is the return value? An interface is ‚Äúclean‚Äù if it allows the caller to do what they want without dealing with unnecessary details.
(((interface)))

In this example, +r+ belongs in the interface because it specifies the circle to be drawn. +n+ is less appropriate because it pertains to the details of how the circle should be rendered.

Rather than clutter up the interface, it is better to choose an appropriate value of +n+ depending on +circumference+:

[source,julia]
----
function circle(t, r)
    circumference = 2 * œÄ * r
    n = trunc(circumference / 3) + 3
    len = circumference / n
    polygon(t, n, len)
end
----

Now the number of segments is an integer near +circumference/3+, so the length of each segment is approximately 3, which is small enough that the circles look good, but big enough to be efficient, and acceptable for any size circle.

Adding 3 to +n+ guarantees that the polygon has at least 3 sides.


[[refactoring]]
=== Refactoring

When I wrote +circle+, I was able to re-use +polygon+ because a many-sided polygon is a good approximation of a circle. But +arc+ is not as cooperative; we can‚Äôt use +polygon+ or +circle+ to draw an arc.

One alternative is to start with a copy of +polygon+ and transform it into +arc+. The result might look like this:
(((arc)))((("function", "programmer-defined", "arc", see="arc")))

[source,julia]
----
function arc(t, r, angle)
    arc_len = 2 * œÄ * r * angle / 360
    n = trunc(arc_len / 3) + 1
    step_len = arc_len / n
    step_angle = angle / n
    for i in 1:n
        forward(t, step_len)
        turn(t, -step_angle)
    end
end
----

The second half of this function looks like +polygon+, but we can‚Äôt re-use +polygon+ without changing the interface. We could generalize +polygon+ to take an +angle+ as a third argument, but then +polygon+ would no longer be an appropriate name! Instead, let‚Äôs call the more general function +polyline+:
(((polyline)))((("function", "programmer-defined", "polyline", see="polyline")))

[source,julia]
----
function polyline(t, n, len, angle)
    for i in 1:n
        forward(t, len)
        turn(t, -angle)
    end
end
----

Now we can rewrite +polygon+ and +arc+ to use +polyline+:
(((polygon)))(((arc)))

[source,julia]
----
function polygon(t, n, len)
    angle = 360 / n
    polyline(t, n, len, angle)
end

function arc(t, r, angle)
    arc_len = 2 * œÄ * r * angle / 360
    n = trunc(arc_len / 3) + 1
    step_len = arc_len / n
    step_angle = angle / n
    polyline(t, n, step_len, step_angle)
end
----

Finally, we can rewrite +circle+ to use +arc+:
(((circle)))

[source,julia]
----
function circle(t, r)
    arc(t, r, 360)
end
----

This process‚Äîrearranging a program to improve interfaces and facilitate code re-use‚Äîis called _refactoring_. In this case, we noticed that there was similar code in +arc+ and +polygon+, so we ‚Äúfactored it out‚Äù into +polyline+.
(((refactoring)))

If we had planned ahead, we might have written +polyline+ first and avoided refactoring, but often you don‚Äôt know enough at the beginning of a project to design all the interfaces. Once you start coding, you understand the problem better. Sometimes refactoring is a sign that you have learned something.


=== A Development Plan

A _development plan_ is a process for writing programs. The process we used in this case study is ‚Äúencapsulation and generalization‚Äù. The steps of this process are:
(((program development plan)))

. Start by writing a small program with no function definitions.

. Once you get the program working, identify a coherent piece of it, encapsulate the piece in a function and give it a name.

. Generalize the function by adding appropriate parameters.

. Repeat steps 1‚Äì3 until you have a set of working functions. Copy and paste working code to avoid retyping (and re-debugging).

. Look for opportunities to improve the program by refactoring. For example, if you have similar code in several places, consider factoring it into an appropriately general function.

This process has some drawbacks‚Äîwe will see alternatives later‚Äîbut it can be useful if you don‚Äôt know ahead of time how to divide the program into functions. This approach lets you design as you go along.


=== Docstring

A _docstring_ is a string before a function that explains the interface (‚Äúdoc‚Äù is short for ‚Äúdocumentation‚Äù). Here is an example:
(((docstring)))(((triple quotes)))((("pass:[&quot;&quot;&quot;]", see="triple quotes")))

[source,julia]
----
"""
polyline(t, n, len, angle)

Draws n line segments with the given length and
angle (in degrees) between them.  t is a turtle.
"""
function polyline(t, n, len, angle)
    for i in 1:n
        forward(t, len)
        turn(t, -angle)
    end
end
----

Documentation can be accessed in the REPL or in a notebook by typing ? followed by the name of a function or macro, and pressing +ENTER+:
(((help)))((("?", see="help")))

----
help?> polyline
search:

  polyline(t, n, len, angle)

  Draws n line segments with the given length and angle (in degrees) between them. t is a turtle.
----

Docstrings are often triple-quoted strings, also known as multiline strings because the triple quotes allow the string to span more than one line.

A docstring contains the essential information someone would need to use this function. It explains concisely what the function does (without getting into the details of how it does it). It explains what effect each parameter has on the behavior of the function and what type each parameter should be (if it is not obvious).

[TIP]
====
Writing this kind of documentation is an important part of interface design. A well-designed interface should be simple to explain; if you have a hard time explaining one of your functions, maybe the interface could be improved.
====


=== Debugging

An interface is like a contract between a function and a caller. The caller agrees to provide certain parameters and the function agrees to do certain work.
(((debugging)))

For example, +polyline+ requires four arguments: +t+ has to be a turtle; +n+ has to be an integer; +len+ should be a positive number; and +angle+ has to be a number, which is understood to be in degrees.

These requirements are called _preconditions_ because they are supposed to be true before the function starts executing. Conversely, conditions at the end of the function are _postconditions_. Postconditions include the intended effect of the function (like drawing line segments) and any side effects (like moving the turtle or making other changes).
(((precondition)))(((postcondition)))

Preconditions are the responsibility of the caller. If the caller violates a (properly documented!) precondition and the function doesn‚Äôt work correctly, the bug is in the caller, not the function.

If the preconditions are satisfied and the postconditions are not, the bug is in the function. If your pre- and postconditions are clear, they can help with debugging.


=== Glossary

module::
A file that contains a collection of related functions and other definitions.
(((module)))

package::
An external library with additional functionality.
(((package)))

using statement::
A statement that reads a module file and creates a module object.
(((using statement)))

loop::
A part of a program that can run repeatedly.
(((loop)))

encapsulation::
The process of transforming a sequence of statements into a function definition.
(((encapsulation)))

generalization::
The process of replacing something unnecessarily specific (like a number) with something appropriately general (like a variable or parameter).
(((generalization)))

interface::
A description of how to use a function, including the name and descriptions of the arguments and return value.
(((interface)))

refactoring::
The process of modifying a working program to improve function interfaces and other qualities of the code.
(((refactoring)))

development plan::
A process for writing programs.
(((program development plan)))

docstring::
A string that appears at the top of a function definition to document the function‚Äôs interface.
(((docstring)))

precondition::
A requirement that should be satisfied by the caller before a function starts.
(((precondition)))

postcondition::
A requirement that should be satisfied by the function before it ends.
(((postcondition)))


=== Exercises

[[ex04-7]]
==== Exercise 4-8

Enter the code in this chapter in a notebook.

. Draw a stack diagram that shows the state of the program while executing +circle(üê¢, radius)+. You can do the arithmetic by hand or add print statements to the code.

. The version of +arc+ in <<refactoring>> is not very accurate because the linear approximation of the circle is always outside the true circle. As a result, the turtle ends up a few pixels away from the correct destination. My solution shows a way to reduce the effect of this error. Read the code and see if it makes sense to you. If you draw a diagram, you might see how it works.
(((arc)))

[source,julia]
----
"""
arc(t, r, angle)

Draws an arc with the given radius and angle:

    t: turtle
    r: radius
    angle: angle subtended by the arc, in degrees
"""
function arc(t, r, angle)
    arc_len = 2 * œÄ * r * abs(angle) / 360
    n = trunc(arc_len / 4) + 3
    step_len = arc_len / n
    step_angle = angle / n

    # making a slight left turn before starting reduces
    # the error caused by the linear approximation of the arc
    turn(t, -step_angle/2)
    polyline(t, n, step_len, step_angle)
    turn(t, step_angle/2)
end
----

[[ex04-8]]
==== Exercise 4-9

Write an appropriately general set of functions that can draw flowers as in <<fig04-2>>.

[[fig04-2]]
.Turtle flowers
image::images/fig42.svg[]

[[ex04-9]]
==== Exercise 4-10

Write an appropriately general set of functions that can draw shapes as in <<fig04-3>>.

[[fig04-3]]
.Turtle pies
image::images/fig43.svg[]

[[ex04-10]]
==== Exercise 4-11

The letters of the alphabet can be constructed from a moderate number of basic elements, like vertical and horizontal lines and a few curves. Design an alphabet that can be drawn with a minimal number of basic elements and then write functions that draw the letters.

You should write one function for each letter, with names +draw_a+, +draw_b+, etc., and put your functions in a file named _letters.jl_.

[[ex04-11]]
==== Exercise 4-12

Read about spirals at https://en.wikipedia.org/wiki/Spiral; then write a program that draws an Archimedan spiral as in <<fig04-4>>.

[[fig04-4]]
.Archimedan spiral
image::images/fig44.svg[]
