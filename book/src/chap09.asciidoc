[[chap09]]
== Estudio de Caso: Juego de Palabras

Este capítulo presenta un segundo estudio de caso, que consiste en resolver sopas de letras buscando palabras que tengan ciertas propiedades. Por ejemplo, encontraremos los palíndromos más largos en inglés y buscaremos palabras cuyas letras aparezcan en orden alfabético. Además, se presentará otro plan de desarrollo de programas: la reducción a un problema previamente resuelto.

[[reading_word_lists]]
=== Leer listas de palabras

Para los ejercicios de este capítulo necesitamos una lista de palabras en español. Hay muchas listas de palabras disponibles en la Web, pero la más adecuada para nuestro propósito es una de las listas de palabras recopiladas y contribuidas al dominio público por Ismael Olea (see http://olea.org/proyectos/lemarios/). Esta lista de 87900 palabras se encuentra en la página de Olea con el nombre de archivo _lemario-general-del-espanol.txt. También es posible descargar una copia desde https://github.com/PiensaEnJulia/PiensaEnJulia.jl/blob/master/data/palabras.txt.
(((lemario)))

Este archivo es un archivo de texto simple, por lo que puede ser abierto con un editor de texto o leído con Julia. La función integrada +open+ toma el nombre del archivo como parámetro y devuelve un objeto archivo que puede ser usado para leer el archivo.
(((open)))((("function", "Base", "open", see="open")))

[source,@julia-eval chap09]
----
using PiensaEnJulia
fin = open(PiensaEnJulia.datapath("palabras.txt"));
----

[source,jlcon]
----
julia> fin = open("palabras.txt")
IOStream(<file palabras.txt>)
----

+fin+ es un objeto archivo que puede ser utilizado como entrada y cuando se deja de utilizar, debe cerrarse con +close(fin)+.

Julia tiene integrada varias funciones de lectura, entre ellas +readline+, que lee los caracteres del archivo hasta que llega a un +salto de línea+, y devuelve el resultado como una cadena:
(((file stream)))(((input)))(((readline)))((("function", "Base", "readline", see="readline")))(((close)))

[source,@julia-repl chap09]
----
readline(fin)
----

La primera palabra en esta lista particular es "a", que indica dirección, intervalo de tiempo, finalidad, entre otros.

El objeto archivo lleva registro de dónde quedó por última vez, por lo que si llama a readline nuevamente, obtendrá la siguiente palabra:

[source,@julia-repl chap09]
----
readline(fin)
----

La siguiente palabra es "a-", que es un prefijo que significa privación.

También se puede usar un archivo como parte de un bucle +for+. El siguiente programa lee +palabras.txt+ e imprime cada palabra, una por línea:
(((for statement)))(((eachline)))((("function", "Base", "eachline", see="eachline")))

[source,julia]
----
for line in eachline("palabras.txt")
    println(line)
end
----


=== Ejercicios

[[ex09-1]]
==== Ejercicio 9-1

Escriba un programa que lea +palabras.txt+ e imprima solo las palabras con más de 20 caracteres (sin contar espacios en blanco).

[[ex09-2]]
==== Ejercicio 9-2

En 1927 Enrique Jardiel Poncela publicó cinco historias cortas, omitiendo en cada una de ellas una vocal. Estas historias incluyen "El Chofer Nuevo", narración escrita sin la letra +'a'+, y "Un marido sin vocación", sin la letra +'e'+. Dado que la letra +'e'+ es la más frecuente del español, esto no es fácil de lograr.
(((Poncela, Enrique Jardiel)))

De hecho, es difícil pensar oraciones que no utilicen esta letra. Intentarlo es complicado inicialmente, pero con práctica se vuelve más fácil.

Está bien, está bien. Pasemos a otra cosa.

Escriba una función llamada +notiene_e+ que devuelva +true+ si una palabra dada no tiene la letra +'e'+.
(((hasno_e)))((("function", "programmer-defined", "hasno_e", see="hasno_e")))

Modifique su programa de la sección anterior para que imprima solo las palabras que no tienen +'e'+, y que calcule el porcentaje de palabras en la lista que no tengan +'e'+.

[[ex09-3]]
==== Exercise 9-3

Escriba una función llamada +evitar+ que tome como argumentos una palabra y una cadena de letras prohibidas, y que devuelva +true+ si la palabra no usa ninguna de las letras prohibidas.
(((avoids)))((("function", "programmer-defined", "avoids", see="avoids")))

Modifique su programa para solicitar al usuario que ingrese una cadena de letras prohibidas, y que luego imprima el número de palabras que no contengan ninguna de ellas. ¿Es posible encontrar una combinación de 5 letras prohibidas que excluya la menor cantidad de palabras?

[[ex09-4]]
==== Exercise 9-4

Escriba una función llamada +usasolo+ que tome una palabra y una cadena de letras, y que devuelva +true+ si la palabra contiene solo letras de la lista. ¿Puedes hacer una oración usando solo las letras +arefhlo+? Aparte de +"¿Hola fer?"+
(((usesonly)))((("function", "programmer-defined", "usesonly", see="usesonly")))

[[ex09-5]]
==== Exercise 9-5

Escriba una función llamada +usatodo+ que tome una palabra y una cadena de letras, y que devuelva +true+ si la palabra usa todas las letras requeridas al menos una vez. ¿Cuántas palabras usan todas las vocales +aeiou+? 
(((usesall)))((("function", "programmer-defined", "usesall", see="usesall")))

[[ex09-6]]
==== Exercise 9-6

Escriba una función llamada +esabecedaria+ que devuelva +true+ si las letras de una palabra aparecen en orden alfabético. ¿Cuántas palabras abecedarias hay?
(((isabecedarian)))((("function", "programmer-defined", "isabecedarian", see="isabecedarian")))

[[search]]
=== Search

Todos los ejercicios en la sección anterior tienen algo en común: se pueden resolver con el patrón de búsqueda. El ejemplo más simple es:
(((search)))(((hasno_e)))

[source,@julia-setup chap09]
----
function notiene_e(palabra)
    for letra in palabra
        if letra == 'e'
            return false
        end
    end
    true
end
----

The +for+ loop traverses the characters in word. If we find the letter +'e'+, we can immediately return +false+; otherwise we have to go to the next letter. If we exit the loop normally, that means we didn’t find an +'e'+, so we return +true+.

You could write this function more concisely using the +∉+ (*+\notin TAB+*) operator, but I started with this version because it demonstrates the logic of the search pattern.
(((∉)))((("operator", "Base", "∉", see="∉")))

+avoids+ is a more general version of +hasno_e+ but it has the same structure:
(((avoids)))

[source,@julia-setup chap09]
----
function avoids(word, forbidden)
    for letter in word
        if letter ∈ forbidden
            return false
        end
    end
    true
end
----

We can return +false+ as soon as we find a forbidden letter; if we get to the end of the loop, we return +true+.

+usesonly+ is similar except that the sense of the condition is reversed:
(((usesonly)))

[source,@julia-setup chap09]
----
function usesonly(word, available)
    for letter in word
        if letter ∉ available
            return false
        end
    end
    true
end
----

Instead of an array of forbidden letters, we have an array of available letters. If we find a letter in +word+ that is not in +available+, we can return +false+.

+usesall+ is similar except that we reverse the role of the word and the string of letters:
(((usesall)))

[source,@julia-setup chap09]
----
function usesall(word, required)
    for letter in required
        if letter ∉ word
            return false
        end
    end
    true
end
----

Instead of traversing the letters in word, the loop traverses the required letters. If any of the required letters do not appear in the word, we can return +false+.

If you were really thinking like a computer scientist, you would have recognized that +usesall+ was an instance of a previously solved problem, and you would have written:

[source,@julia-setup chap09]
----
function usesall(word, required)
    usesonly(required, word)
end
----

This is an example of a program development plan called _reduction to a previously solved problem_, which means that you recognize the problem you are working on as an instance of a solved problem and apply an existing solution.
(((program development plan)))(((reduction to a previously solved problem)))


=== Looping with Indices

I wrote the functions in the previous section with +for+ loops because I only needed the characters in the strings; I didn’t have to do anything with the indices.

For +isabecedarian+ we have to compare adjacent letters, which is a little tricky with a +for+ loop:
(((isabecedarian)))(((for statement)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    i = firstindex(word)
    previous = word[i]
    j = nextind(word, i)
    for c in word[j:end]
        if c < previous
            return false
        end
        previous = c
    end
    true
end
----

An alternative is to use recursion:
(((recursion)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    if length(word) <= 1
        return true
    end
    i = firstindex(word)
    j = nextind(word, i)
    if word[i] > word[j]
        return false
    end
    isabecedarian(word[j:end])
end
----

Another option is to use a +while+ loop:
(((while statement)))

[source,@julia-setup chap09]
----
function isabecedarian(word)
    i = firstindex(word)
    j = nextind(word, 1)
    while j <= sizeof(word)
        if word[j] < word[i]
            return false
        end
        i = j
        j = nextind(word, i)
    end
    true
end
----

The loop starts at +i=1+ and +j=nextind(word, 1)+ and ends when +j>sizeof(word)+. Each time through the loop, it compares the ++i++th character (which you can think of as the current character) to the ++j++th character (which you can think of as the next).

If the next character is less than (alphabetically before) the current one, then we have discovered a break in the abecedarian trend, and we return +false+.

If we get to the end of the loop without finding a fault, then the word passes the test. To convince yourself that the loop ends correctly, consider an example like +"flossy"+.

Here is a version of +ispalindrome+ that uses two indices; one starts at the beginning and goes up; the other starts at the end and goes down.
(((ispalindrome)))

[source,@julia-setup chap09]
----
function ispalindrome(word)
    i = firstindex(word)
    j = lastindex(word)
    while i<j
        if word[i] != word[j]
            return false
        end
        i = nextind(word, i)
        j = prevind(word, j)
    end
    true
end
----

Or we could reduce to a previously solved problem and write:

[source,@julia-setup chap08]
----
function ispalindrome(word)
    isreverse(word, word)
end
----

Using +isreverse+ from <<deb08>>.
(((isreverse)))


=== Debugging

Testing programs is hard. The functions in this chapter are relatively easy to test because you can check the results by hand. Even so, it is somewhere between difficult and impossible to choose a set of words that test for all possible errors.
(((debugging)))

Taking +hasno_e+ as an example, there are two obvious cases to check: words that have an +'e'+ should return +false+, and words that don’t should return +true+. You should have no trouble coming up with one of each.

Within each case, there are some less obvious subcases. Among the words that have an “e”, you should test words with an “e” at the beginning, the end, and somewhere in the middle. You should test long words, short words, and very short words, like the empty string. The empty string is an example of a _special case_, which is one of the non-obvious cases where errors often lurk.
(((special case)))

In addition to the test cases you generate, you can also test your program with a word list like +palabras.txt+. By scanning the output, you might be able to catch errors, but be careful: you might catch one kind of error (words that should not be included, but are) and not another (words that should be included, but aren’t).

In general, testing can help you find bugs, but it is not easy to generate a good set of test cases, and even if you do, you can’t be sure your program is correct. According to a legendary computer scientist:
(((Dijkstra, Edsger W.)))

[quote,  Edsger W. Dijkstra]
____
Program testing can be used to show the presence of bugs, but never to show their absence!
____

=== Glossary

file stream::
A value that represents an open file.
(((file stream)))

reduction to a previously solved problem::
A way of solving a problem by expressing it as an instance of a previously solved problem.
(((reduction to a previously solved problem)))

special case::
A test case that is atypical or non-obvious (and less likely to be handled correctly).
(((special case)))


=== Exercises

[[ex09-7]]
==== Exercise 9-7

This question is based on a Puzzler that was broadcast on the radio program _Car Talk_ (https://www.cartalk.com/puzzler/browse):
(((Car Talk)))

[quote]
____
Give me a word with three consecutive double letters. I’ll give you a couple of words that almost qualify, but don’t. For example, the word committee, c-o-m-m-i-t-t-e-e. It would be great except for the 'i' that sneaks in there. Or Mississippi: M-i-s-s-i-s-s-i-p-p-i. If you could take out those i’s it would work. But there is a word that has three consecutive pairs of letters and to the best of my knowledge this may be the only word. Of course there are probably 500 more but I can only think of one. What is the word?
____

Write a program to find it.

[[ex09-8]]
==== Exercise 9-8

Here’s another _Car Talk_ Puzzler (https://www.cartalk.com/puzzler/browse):

[quote]
____
I was driving on the highway the other day and I happened to notice my odometer. Like most odometers, it shows six digits, in whole miles only. So, if my car had 300000 miles, for example, I’d see 3-0-0-0-0-0.

Now, what I saw that day was very interesting. I noticed that the last 4 digits were palindromic; that is, they read the same forward as backward. For example, 5-4-4-5 is a palindrome, so my odometer could have read 3-1-5-4-4-5.

One mile later, the last 5 numbers were palindromic. For example, it could have read 3-6-5-4-5-6. One mile after that, the middle 4 out of 6 numbers were palindromic. And you ready for this? One mile later, all 6 were palindromic!

The question is, what was on the odometer when I first looked?
____

Write a Julia program that tests all the six-digit numbers and prints any numbers that satisfy these requirements.

[[ex09-9]]
==== Exercise 9-9

Here’s another _Car Talk_ Puzzler you can solve with a search (https://www.cartalk.com/puzzler/browse):

[quote]
____
Recently I had a visit with my mom and we realized that the two digits that make up my age when reversed resulted in her age. For example, if she’s 73, I’m 37. We wondered how often this has happened over the years but we got sidetracked with other topics and we never came up with an answer.

When I got home I figured out that the digits of our ages have been reversible six times so far. I also figured out that if we’re lucky it would happen again in a few years, and if we’re really lucky it would happen one more time after that. In other words, it would have happened 8 times over all. So the question is, how old am I now?
____

Write a Julia program that searches for solutions to this Puzzler.

[TIP]
====
You might find the function +lpad+ useful.
(((lpad)))((("function", "Base", "lpad", see="lpad")))
====

