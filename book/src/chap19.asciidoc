[[chap19]]
== Extra: Sintaxis

Uno de los objetivos de este libro es enseñarle lo justo y necesario de Julia. Se explica una sola forma de hacer las cosas, y en ocasiones se deja como ejercicio al lector una segunda manera.

Ahora veremos algunos temas que hemos dejado de lado, que sí son útiles. Julia proporciona una serie de características que no son realmente necesarias (se puede escribir un buen código sin ellas), pero a veces permiten escribir un código más conciso, legible y/o eficiente.

En este capítulo y el siguiente se discute aquello que se ha omitido en los capítulos anteriores:

* más sintaxis
* funciones, tipos y macros disponibles directamente de +Base+ 
(((Base)))
* funciones, tipos y macros de la Biblioteca Estándar (Standard Library)
(((Standard Library)))

=== Tuplas con nombre

Es posible colocarle nombre a los componentes de una tupla, creando una tupla con nombre:

[source,@julia-repl-test]
----
julia> x = (a=1, b=1+1)
(a = 1, b = 2)
julia> x.a
1
----

En las tuplas con nombre, se puede acceder a los atributos con su nombre utilizando la sintaxis de punto +(x.a)+.
(((named tuple)))(((dot syntax)))


=== Funciones

Las funciones en Julia también se pueden definir mediante una sintaxis compacta.

[source,@julia-repl-test]
----
julia> f(x,y) = x + y
f (generic function with 1 method)
----

[[anonymous_functions]]
==== Funciones Anonimas

Podemos definir una función sin especificar su nombre:

[source,@julia-repl-test]
----
julia> x -> x^2 + 2x - 1
#1 (generic function with 1 method)
julia> function (x)
           x^2 + 2x - 1
       end
#3 (generic function with 1 method)
----

Estos son ejemplos de _funciones anónimas_. Las funciones anónimas generalmente se usan como argumento de otra función:
(((anonymous function)))(((Plots)))((("module", "Plots", see="Plots")))(((plot)))((("function", "Plots", "plot", see="plot")))

[source,jlcon]
----
julia> using Plots

julia> plot(x -> x^2 + 2x - 1, 0, 10, xlabel="x", ylabel="y")

----

<<fig19-1>> muestra el resultado del comando plot (graficar en inglés).

[[fig19-1]]
.Plot
image::images/fig191.svg[pdfwidth="10cm"]

==== Argumentos con nombre

También se puede poner nombre a los argumentos de una función:

[source,@julia-repl-test]
----
julia> function migrafico(x, y; style="continua", width=1, color="negro")
           ###
       end
migrafico (generic function with 1 method)
julia> migrafico(0:10, 0:10, style="dotted", color="blue")

----

Los _argumentos con nombre_ en una función se especifican después de un punto y coma en la especificación, pero al llamar a la función se pueden utilizar solo comas.
(((;)))(((keyword arguments)))

==== Clausuras

Una _clausura_ es una técnica que permite que una función capture una variable definida fuera del ambito de la función.

[source,@julia-repl-test]
----
julia> foo(x) = ()->x
foo (generic function with 1 method)

julia> bar = foo(1)
#1 (generic function with 1 method)

julia> bar()
1
----

En este ejemplo, la función +foo+ devuelve una función anónima que tiene acceso al argumento +x+ de la función +foo+. +bar+ apunta a la función anónima y devuelve el valor del argumento de +foo+.


=== Bloques

Un _bloque_ es una forma de agrupar varias sentencias. Un bloque comienza con la palabra reservada +begin+ y termina con +end+.
(((begin)))((("keyword", "begin", see="begin")))(((end)))(((block)))

En <<chap04>> se presentó la macro +@svg+:

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

En este ejemplo, la macro +@svg+ tiene un único argumento: un bloque, que agrupa 3 llamadas a funciones.

==== Bloques +let+ 

Un bloque +let+ es útil para crear nuevas ligaduras (o bindings), es decir, variables locales que pueden apuntar a valores.

[source,@julia-repl-test]
----
julia> x, y, z = -1, -1, -1;

julia> let x = 1, z
           @show x y z;
       end
x = 1
y = -1
ERROR: UndefVarError: z not defined
julia> @show x y z;
x = -1
y = -1
z = -1
----

En el ejemplo, la primera macro +@show+ muestra la variable local +x+, la variable global +y+ y la variable local indefinida +z+. Las variables globales se mantienen intactas.


==== Bloques +do+

En <<reading_and_writing>> cerramos el archivo después de terminar de escribir en él. Esto se puede hacer automáticamente usando un _Bloque do_:
(((do)))((("keyword", "do", see="do")))

[source,@julia-repl-test chap19]
----
julia> datos = "El Cid convoca a sus vasallos;\néstos se destierran con él.\n"
"El Cid convoca a sus vasallos;\néstos se destierran con él.\n"
julia> open("salida.txt", "w") do fout
           write(fout, datos)
       end
61
----

En este ejemplo, +fout+ es el archivo stream utilizado para la salida.

Esto es equivalente a:

[source,@julia-repl-test chap19]
----
julia> f = fout -> begin
           write(fout, datos)
       end
#3 (generic function with 1 method)
julia> open(f, "salida.txt", "w")
61
----

La función anónima se utiliza como primer argumento de la función +open+:
(((open)))

[source,julia]
----
function open(f::Function, args...)
    io = open(args...)
    try
        f(io)
    finally
        close(io)
    end
end
----

Un bloque +do+ puede "capturar" variables de su ámbito envolvente (enclosed scope). Por ejemplo, la variable +datos+ en el ejemplo anterior de +open pass:[...] do+ es capturada desde el ámbito externo. 


=== Control Flow

==== Operador ternario

El _operador ternario_, +?:+, puede utilizarse en vez de una sentencia +if-elseif+. Esta sentencia se usa cuando se necesita elegir entre diferentes expresiones con valor único.
(((?:)))((("operator", "Base", "?:", see="?:")))((("ternary operator", see="?:")))

[source,@julia-repl-test]
----
julia> a = 150
150
julia> a % 2 == 0 ? println("par") : println("impar")
even
----

La expresión que va antes de +?+ es una expresión de condición. Si la condición es +true+, se evalúa la expresión que va antes de +:+; de lo contrario, se evalúa la expresión que va después de +:+.

==== Evaluación de cortocircuito

Los operadores +&&+ y +||+ realizan una _evaluación de cortocircuito_, es decir, se evalúa el siguiente argumento solo cuando es necesario para determinar el valor final.
(((&&)))(((||)))(((short-circuit evaluation)))

Por ejemplo, una función factorial recursiva podría definirse así:
(((fact)))

[source,@julia-setup]
----
function fact(n::Integer)
    n >= 0 || error("n debe ser no negativo")
    n == 0 && return 1
    n * fact(n-1)
end
----

==== Tarea (o Corrutina)

Una _tarea_ es una estructura de control que puede ceder el control de forma cooperativa sin hacer return. En Julia, una tarea puede implementarse como una función con un objeto +Channel+ como primer argumento. Se usa un channel para pasar valores de la función a la sentencia que la llama.

El término "cooperativo" alude a que los programas deben cooperar para que todo el esquema de programación funcione.

La secuencia de Fibonnaci se puede generar mediante una tarea.
(((task)))(((Channel)))((("type", "Base", "Channel", see="Channel")))(((put!)))((("function", "Base", "put!", see="put!")))

[source,@julia-setup chap19]
----
function fib(c::Channel)
    a = 0
    b = 1
    put!(c, a)
    while true
        put!(c, b)
        (a, b) = (b, a+b)
    end
end
----

+put!+ almacena valores en un objeto channel y +take!+ lee valores desde él:
(((take!)))((("function", "Base", "take!", see="take!")))

[source,@julia-repl-test chap19]
----
julia> fib_gen = Channel(fib);

julia> take!(fib_gen)
0
julia> take!(fib_gen)
1
julia> take!(fib_gen)
1
julia> take!(fib_gen)
2
julia> take!(fib_gen)
3
----

El constructor +Channel+ crea la tarea. La función +fib+ se suspende después de cada llamada a +put!+ y se reanuda al llamar a +take!+. Por razones de rendimiento, se almacenan varios valores de la secuencia en el objeto channel durante un ciclo de reanudación/suspensión.

Un objeto channel también se puede usar como iterador:

[source,@julia-repl-test chap19]
----
julia> for val in Channel(fib)
           print(val, " ")
           val > 20 && break
       end
0 1 1 2 3 5 8 13 21
----


=== Tipos

==== Tipos Primitivos

Un tipo concreto compuesto por bits se llama _tipo primitivo_. A diferencia de la mayoría de los lenguajes, en Julia podemos declarar nuestros propios tipos primitivos. Los tipos primitivos estándar se definen de la misma manera:
(((primitive type)))((("keyword", "primitive type", see="primitive type")))

[source,julia]
----
primitive type Float64 <: AbstractFloat 64 end
primitive type Bool <: Integer 8 end
primitive type Char <: AbstractChar 32 end
primitive type Int64 <: Signed 64 end
----

El número en las sentencias especifica cuántos bits se requieren.

El siguiente ejemplo crea un tipo primitivo +Byte+ y un constructor:
(((Byte)))((("type", "programmer-defined", "Byte", see="Byte")))

[source,@julia-repl-test]
----
julia> primitive type Byte 8 end

julia> Byte(val::UInt8) = reinterpret(Byte, val)
Byte
julia> b = Byte(0x01)
Byte(0x01)
----

La función +reinterpret+ se usa para almacenar los bits de un entero sin signo con 8 bits (+UInt8+) en el byte.
(((reinterpret)))((("function", "Base", "reinterpret", see="reinterpret")))(((UInt8)))((("type", "Base", "UInt8", see="UInt8")))

==== Tipos Paramétricos

El sistema de tipos de Julia es _paramétrico_, lo que significa que los tipos pueden tener parámetros.

Los parámetros de un tipo se colocan después del nombre del tipo, entre llaves:
(((curly braces)))

[source,@julia-setup chap19]
----
struct Punto{T<:Real}
    x::T
    y::T
end
----

Con esto se define un nuevo tipo paramétrico, +Punto{T<:Real}+, que contiene dos "coordenadas" de tipo +T+, que puede ser cualquier tipo que tenga +Real+ como supertipo.

[source,@julia-repl-test chap19]
----
julia> Punto(0.0, 0.0)
Punto{Float64}(0.0, 0.0)
----

Además de los tipos compuestos, los tipos abstractos y los tipos primitivos también pueden tener parámetros.

[TIP]
====
Para mejorar el rendimiento, es totalmente recomendable tener tipos concretos como atributos de una estructura, por lo que esta es una buena manera de hacer que +Punto+ sea rápido y flexible.
====

==== Union de Tipo

Una _union de tipo_ es un tipo paramétrico abstracto que puede actuar como cualquiera de los tipos de sus argumentos:
(((type union)))(((Union)))((("type", "Base", "Union", see="Union")))

[source,@julia-repl-test]
----
julia> EnteroOCadena = Union{Int64, String}
Union{Int64, String}
julia> 150 :: EnteroOCadena
150
julia> "Julia" :: EnteroOCadena
"Julia"
----

Una unión de tipos es, en la mayoría de los lenguajes informáticos, una construcción interna para trabajar con tipos. Sin embargo, Julia pone a disposición esta característica para sus usuarios, ya que permite generar un código eficiente (cuando la unión es entre pocos tipos). Esta característica le da una gran flexibilidad al programador de Julia para controlar el dispatch.

=== Métodos

==== Métodos Paramétricos 

Las definiciones de métodos también pueden tener parámetros de tipo que limiten su especificación:
(((signature)))

[source,@julia-repl-test chap19]
----
julia> espuntoentero(p::Punto{T}) where {T} = (T === Int64)
espuntoentero (generic function with 1 method)
julia> p = Punto(1, 2)
Punto{Int64}(1, 2)
julia> espuntoentero(p)
true
----

==== Objetos Similares a Funciones

Cualquier objeto arbitrario de Julia puede hacerse "invocable". Tales objetos "invocables" a veces se denominan _funtores_.
(((functor)))

[source,@julia-setup chap19]
----
struct Polinomio{R}
    coef::Vector{R}
end

function (p::Polinomio)(x)
    val = p.coeff[end]
    for coef in p.coef[end-1:-1:1]
        val = val * x + coef
    end
    val
end
----

Para evaluar el polinomio, simplemente debemos llamarlo:

[source,@julia-repl-test chap19]
----
julia> p = Polinomio([1,10,100])
Polynomi{Int64}([1, 10, 100])
julia> p(3)
931
----

=== Constructores

Los tipos paramétricos se pueden construir explícita o implícitamente:

[source,@julia-repl-test chap19]
----
julia> Punto(1,2)         # T implicito
Point{Int64}(1, 2)
julia> Punto{Int64}(1, 2) # T explicito
Point{Int64}(1, 2)
julia> Punto(1,2.5)       # T implicito
ERROR: MethodError: no method matching Point(::Int64, ::Float64)
----

Se generan constructores internos y externos por defecto para cada +T+:
(((constructor)))

[source,julia]
----
struct Punto{T<:Real}
    x::T
    y::T
    Punto{T}(x,y) where {T<:Real} = new(x,y)
end

Punto(x::T, y::T) where {T<:Real} = Punto{T}(x,y);
----

y tanto +x+ como +y+ deben ser del mismo tipo. 

Cuando +x+ e +y+ son de tipos diferentes, se puede definir el siguiente constructor externo:

[source,@julia-setup chap19]
----
Punto(x::Real, y::Real) = Punto(promote(x,y)...);
----

La función +promote+ se detalla en <<promoción>>.
(((promote)))((("function", "Base", "promote", see="promote")))

=== Conversión y Promoción

Julia tiene un sistema para convertir argumentos de diferentes tipos a un tipo común. Esto es llamado promoción, y aunque no es automático, se puede realizar fácilmente.

==== Conversion

Un valor se puede convertir de un tipo a otro:
(((conversion)))(((convert)))((("function", "Base", "convert", see="convert")))

[source,@julia-repl-test]
----
julia> x = 12
12
julia> typeof(x)
Int64
julia> convert(UInt8, x)
0x0c
julia> typeof(ans)
UInt8
----

Podemos agregar nuestros propios métodos +convert+:
[source,@julia-repl-test chap19]
----
julia> Base.convert(::Type{Punto{T}}, x::Array{T, 1}) where {T<:Real} = Punto(x...)

julia> convert(Punto{Int64}, [1, 2])
Punto{Int64}(1, 2)
----

[[promotion]]
==== Promoción

_Promoción_ es la conversión de valores de diferentes tipos a un solo tipo común:
(((promotion)))(((promote)))

[source,@julia-repl-test]
----
julia> promote(1, 2.5, 3)
(1.0, 2.5, 3.0)
----

Generalmente, los métodos para la función +promote+ no se definen directamente, sino que se usa la función auxiliar +promot_rule+ para especificar las reglas de la promoción:
(((promote_rule)))((("function", "Base", "promote_rule", see="promote_rule")))

[source,julia]
----
promote_rule(::Type{Float64}, ::Type{Int32}) = Float64
----

=== Metaprogramación

Un código de Julia se puede representar como una estructura de datos del mismo lenguaje. Esto permite que un programa escriba y manipule su propio código.

==== Expresiones

Cada programa de Julia comienza como una cadena:

[source,@julia-repl-test chap19]
----
julia> prog = "1 + 2"
"1 + 2"
----

El siguiente paso es analizar cada cadena en un objeto llamado _expresión_, representado por el tipo de Julia +Expr+:
(((expression)))(((Expr)))((("type", "Base", "Expr", see="Expr")))(((parse)))((("function", "Meta", "parse", see="parse")))

[source,@julia-repl-test chap19]
----
julia> ex = Meta.parse(prog)
:(1 + 2)
julia> typeof(ex)
Expr
julia> dump(ex)
Expr
  head: Symbol call
  args: Array{Any}((3,))
    1: Symbol +
    2: Int64 1
    3: Int64 2
----

La función +dump+ muestra objetos expr con anotaciones.
(((dump)))

Las expresiones se pueden construir directamente con el prefijo +:+ entre paréntesis o usando un bloque quote:
(((:)))(((quote)))((("keyword", "quote", see="quote")))

[source,@julia-repl-test chap19]
----
julia> ex = quote
           1 + 2
       end;
----

==== +eval+

Julia puede evaluar un objeto de expresión usando la función +eval+:
(((eval)))((("function", "Core", "eval", see="eval")))

[source,@julia-eval chap19]
----
import Base.eval
----

[source,@julia-repl-test chap19]
----
julia> eval(ex)
3
----

Cada módulo tiene su propia función +eval+ que evalúa las expresiones de su ámbito.

[WARNING]
====
Generalmente si un código tiene muchas llamadas a +eval+, significa que algo está mal. +eval+ se considera "malo".
====

==== Macros

Las macros pueden incluir código generado en un programa. Una _macro_ asocia una tupla de objetos +Expr+ directamente con una expresión compilada:
Macros can include generated code in a program. A _macro_ maps a tuple of +Expr+ objects directly to a compiled expression:
(((macro)))

Aquí hay una macro simple:
(((@containervariable)))((("macro", "programmer-defined", "@containervariable", see="@containervariable")))

[source,@julia-setup chap19]
----
macro containervariable(container, element)
    return esc(:($(Symbol(container,element)) = $container[$element]))
end
----

Las macros se llaman anteponiendo +@+ (arroba) a su nombre. La llamada a la macro +@ contiene letras mayúsculas 1+ se reemplaza por:
Macros are called by prefixing their name with the +@+ (at-sign). The macro call +@containervariable letters 1+ is replaced by:
(((@)))

[source,julia]
----
:(letters1 = letters[1])
----

+@macroexpand @containervariable letters 1+  returns this expression which is extremely useful for debugging.
(((@macroexpand)))((("macro", "Base", "@macroexpand", see="@macroexpand")))

Este ejemplo ilustra cómo una macro puede acceder al nombre de sus argumentos, algo que una función no puede hacer. La expresión de retorno debe "escaparse" con +esc+ porque debe resolverse en el entorno de macro llamada.

This example illustrates how a macro can access the name of its arguments, something a function can’t do. The return expression needs to be “escaped” with +esc+ because it has to be resolved in the macro call environment.
(((esc)))((("function", "Base", "esc", see="esc")))

[NOTE]
====
Why macros?

Macros generate and include fragments of customized code during parse time, thus _before_ the full program is run.
Las macros generan e incluyen fragmentos de código personalizado durante el tiempo de análisis, por lo tanto, antes de ejecutar el programa completo.
====

==== Generated Functions

La macro +@generated+ crea código especializado para métodos dependiendo del tipo de los argumentos:
(((generated functions)))(((@generated)))((("macro", "Base", "@generated", see="@generated")))

[source,@julia-setup chap19]
----
@generated function cuadrado(x)
    println(x)
    :(x * x)
end
----

El cuerpo devuelve una expresión citada como una macro.
The body returns a quoted expression like a macro.

For the caller, the _generated function_ behaves as a regular function:

[source,@julia-repl-test chap19]
----
julia> x = cuadrado(2); # note: output is from println() statement in the body
Int64
julia> x              # now we print x
4
julia> y = cuadrado("spam");
String
julia> y
"spamspam"
----

=== Missing Values

_Missing values_ can be represented via the +missing+ object, which is the singleton instance of the type +Missing+.
(((missing values)))(((missing)))(((Missing)))((("type", "Base", "Missing", see="Missing")))

Arrays can contain missing values:

[source,@julia-repl-test chap19]
----
julia> a = [1, missing]
2-element Array{Union{Missing, Int64},1}:
 1
  missing
----

The element type of such an array is +Union{Missing, T}+, with +T+ the type of the non-missing values.

Reduction functions return +missing+ when called on arrays which contain missing values

[source,@julia-repl-test chap19]
----
julia> sum(a)
missing
----

In this situation, use the +skipmissing+ function to skip missing values:
(((skipmissing)))((("function", "Base", "skipmissing", see="skipmissing")))

[source,@julia-repl-test chap19]
----
julia> sum(skipmissing([1, missing]))
1
----


=== Calling C and Fortran Code

A lot of code is written in C or Fortran. Reusing tested code is often better than writing your own version of an algorithm. Julia can call directly existing C or Fortran libraries using the +ccall+ syntax.
(((ccall)))((("function", "Base", "ccall", see="ccall")))

In <<databases>> we introduced a Julia interface to the GDBM library of database functions. The library is written in C. To close the database a function call to +close(db)+ has to be made:

[source,julia]
----
Base.close(dbm::DBM) = gdbm_close(dbm.handle)

function gdbm_close(handle::Ptr{Cvoid})
    ccall((:gdbm_close, "libgdbm"), Cvoid, (Ptr{Cvoid},), handle)
end
----

A dbm object has a field +handle+ of +Ptr{Cvoid}+ type. This field holds a C pointer that refers to the database. To close the database the C function +gdbm_close+ has to be called having as only argument the C pointer pointing to the database and no return value. Julia does this directly with the +ccall+ function having as arguments:
(((Ptr)))((("type", "Base", "Ptr", see="Ptr")))

* a tuple consisting of a symbol holding the name of the function we want to call: +:gdbm_close+ and the shared library specified as a string: +"libgdm"+,

* the return type: +Cvoid+,

* a tuple of argument types: +(Ptr{Cvoid},)+ and

* the argument values: +handle+.

The complete mapping of the GDBM library can be found as an example in the PiensaEnJulia sources.

=== Glossary

clausura::
Función que captura variables del ámbito en dónde está definida.
(((closure)))

bloque let::
Bloque de asignación de nuevas ligaduras variables.
(((let block)))

función anónima::
Función definida sin nombre.
(((anonymous function)))

tupla con nombre::
Tupla con componentes con nombre.
(((named tuple)))

argumentos con nombre::
Argumentos identificados por su nombre en vez de solo por la posición que ocupan.
(((keyword arguments)))

bloque do::
Construcción usada para definir y llamar a una función anónima parecida a un bloque de código normal.
(((do block)))

operador ternario::
Operador de estructura de control que toma tres operandos: una condición, una expresión que se ejecutará si la condición devuelve +true+ y una expresión que se ejecutará si la condición devuelve +false+.
(((ternary operator)))

evaluación de cortocircuito::
Evaluación de un operador booleano para el que se ejecuta o evalúa el segundo argumento solo si el primero no es suficiente para determinar el valor de la expresión.

Evaluation of a boolean operator for which the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression.
(((short-circuit evaluation)))

tareas (corrutina)::
Característica de las estructuras de control que permite suspender y reanudar cálculos de manera flexible.
(((task)))

tipo primitivo::
Tipo concreto cuyos datos están compuestos de bits.
(((primitive type)))

type union::
Type which includes as objects all instances of any of its type parameters.
(((type union)))

tipo paramétrico::
Tipo que tiene parámetros.
(((parametric type)))

funtor::
Objeto con un método asociado, para que sea invocable.
Object with an associated method, so that it is callable.
(((functor)))

conversión::
Permite convertir un valor de un tipo a otro.
(((conversion)))

promoción::
Conversión de valores de diferentes tipos a un soloa tipo común.
(((promotion)))

expresión::
Tipo de Julia que contiene una construcción de lenguaje.
Julia type that holds a language construct.
(((expression)))

macro::
Way to include generated code in the final body of a program.
(((macro)))

generated functions::
Functions capable of generating specialized code depending on the types of the arguments.
(((generated functions)))

missing values::
Instances that represent data points with no value.
(((missing values)))
