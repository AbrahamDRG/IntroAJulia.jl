[[chap05]]
== Condicionales y recursividad

El tema principal de este capítulo es la sentencia +if+, la cual permite ejecutar diferentes acciones dependiendo del estado del programa. Inicialmente se presentan dos nuevos operadores: división entera de tipo piso y módulo.


=== División entera de tipo piso y Módulo

El operador _división entera de tipo piso_, +÷+ (*+\div TAB+*), divide dos números y redondea hacia abajo el resultado. Por ejemplo, suponga que la duración de una película es de 105 minutos. Es posible que desee saber la duración en horas. La división convencional devuelve un número de punto flotante:
(((operador de división entera de tipo piso))) ((("operador", "Base", "÷", see = "operador división entera de tipo piso"))) ((("÷", see="operador división entera de tipo piso")))

[source,@julia-repl-test chap05]
----
julia> minutos = 105
105
julia> minutos / 60
1.75
----

Pero normalmente las horas no se escriben con decimales. La división entera de tipo piso devuelve el número entero de horas, redondeado hacia abajo:

[source,@julia-repl-test chap05]
----
julia> horas = minutos ÷ 60
1
----

Para obtener el resto de la división, se puede restar una hora (en minutos) a la duración total de la película:

[source,@julia-repl-test chap05]
----
julia> resto = minutos - horas * 60
45
----

Otra alternativa es usar el _operador módulo_, +%+, que divide dos números y devuelve el resto.
(((operador módulo)))((("operator", "Base", "%", see="operador módulo")))((("%", see="operador módulo")))

[source,@julia-repl-test chap05]
----
julia> resto = minutos % 60
45
----

[TIP]
====
El operador módulo es más útil de lo que parece. Por ejemplo, permite verificar si un número es divisible por otro: si +x%y+ es cero, entonces +x+ es divisible por +y+.

Además, puede extraer el (o los) dígito(s) más a la derecha de un número. Por ejemplo, +x%10+ devuelve el dígito más a la derecha de un entero +x+ (en base 10). Del mismo modo, +x%100+ devuelve los dos últimos dígitos.

====

=== Expresiones booleanas

Una _expresión booleana_ es una expresión que es verdadera o falsa. Los siguientes ejemplos usan el operador +==+, que compara dos operandos, y devuelve el valor +true+ (verdadero en español) si son iguales, y el valor +false+ (falso) de lo contrario.
(((expresión booleana)))(((true)))(((false)))

[source,@julia-repl-test]
----
julia> 5 == 5
true
julia> 5 == 6
false
----

+true+ y +false+ son valores especiales que pertenecen al tipo +Bool+; no son cadenas:
(((Bool)))((("type", "Base", "Bool", see="Bool")))

[source,@julia-repl-test]
----
julia> typeof(true)
Bool
julia> typeof(false)
Bool
----

El operador +==+ es un operador relacional. El resto de operadores relacionales son:
(((operador relacional)))(((==)))((("operador", "Base", "==", see="==")))

[source,julia]
----
      x != y               # x no es igual a y 
      x ≠ y                # (\ne TAB)
      x > y                # x es mayor que y
      x < y                # x es menor que y
      x >= y               # x es mayor o igual que y
      x ≥ y                # (\ge TAB)
      x <= y               # x es menor o igual que y
      x ≤ y                # (\le TAB)
----

[WARNING]
====
Aunque estas operaciones probablemente le sean familiares, los símbolos de Julia son diferentes de los símbolos matemáticos. Un error común es usar un solo signo igual (+=+) en vez de un doble signo igual (+==+). Recuerde que +=+ es un operador de asignación y +==+ es un operador relacional. No existe +=<+ o +pass:[=>]+.
(((≠)))((("operador", "Base", "≠", see="≠")))((("!=", see="≠")))((("operador", "Base", "!=", see="≠")))(((>)))((("operador", "Base", ">", see=">")))(((<)))((("operador", "Base", "<", see="<")))(((≥)))((("operador", "Base", "≥", see="≥")))(((">=", see="≥")))((("operador", "Base", ">=", see="≥")))(((≤)))((("operador", "Base", "≤", see="≤")))((("pass:[&lt;=]", see="≤")))((("operador", "Base", "pass:[&lt;=]", see="≤")))
====


=== Operadores Lógicos

Hay tres operadores lógicos: +&&+ (y), +||+ (o) y +!+ (no). La semántica (significado) de estos operadores es similar a su significado en español. Por ejemplo, +x>0 && x<10+ es verdadero solo si +x+ es mayor que +0+ _y_ menor que +10+.
(((operador lógico)))(((&&)))(((||)))(((!)))

+n%2==0 || n%3 == 0+ es verdadero si _una o ambas_ condiciones son verdaderas, es decir, si el número es divisible por 2 _o_ por 3.

Tanto +&&+ como +||+ se asocian en primer lugar con el objeto a su derecha, pero +&&+ tiene preferencia por sobre +||+.

Finalmente, el operador +!+ niega una expresión booleana, entonces +!(x>y)+ es verdadero si +x>y+ es falso, es decir, si +x+ es menor o igual que +y+.

=== Ejecución Condicional

Para escribir programas útiles, generalmente necesitamos poder verificar condiciones y cambiar el comportamiento del programa acorde a ellas. Las sentencias condicionales nos permiten hacer esto. La forma más simple es la sentencia +if+ ("si" en inglés):
(((sentencia condicional)))(((if)))((("keyword", "if", see="if")))(((sentencia if)))((("sentencia", "if", see="sentencia if")))

[source,julia]
----
if x > 0
    println("x es positivo")
end
----

La expresión booleana después de +if+ se llama _condición_. Si es verdadera, se ejecuta la instrucción con sangría. Si no, nada ocurre.
(((condition)))

Las sentencias +if+ tienen la misma estructura que las definiciones de función: un encabezado seguido del cuerpo, terminado con la palabra reservada +end+ (en español "fin"). Las sentencias como este se denominan _sentencias compuestas_.
(((sentencia compuesta)))(((end)))

No hay límite en el número de sentencias que pueden aparecer en el cuerpo. A veces es útil tener un cuerpo sin sentencias (por lo general, como un marcador de posición para el código que aún no se ha escrito).

[source,julia]
----
if x < 0
    # TODO: se necesita realizar alguna acción con los valores negativos!
end
----


=== Ejecución alternativa

Una segunda forma de la sentencia +if+ es la "ejecución alternativa", en la que hay dos posibilidades y la condición determina cuál se ejecuta. La sintaxis se ve así:
(((ejecución alternativa)))(((else)))((("keyword", "else", see="else")))

[source,julia]
----
if x % 2 == 0
    println("x es par")
else
    println("x es impar")
end
----
Si el resto de +x+ dividido por 2 es 0, entonces +x+ es par, y el programa muestra un mensaje acorde. Si la condición es falsa, se ejecuta el segundo conjunto de sentencias. Como la condición debe ser verdadera o falsa, se ejecutará exactamente una de las alternativas. Las alternativas se llaman _ramas_, porque son ramas en el flujo de ejecución.
(((branch)))

=== Condicionales encadenadas

A veces hay más de dos posibilidades y necesitamos más de dos ramas. Una manera de expresar este cómputo es a través de una _condicional encadenada_:
(((condicional encadenada)))(((elseif)))((("palabra reservada", "elseif", see="elseif")))

[source,julia]
----
if x < y
    println("x es menor que y")
elseif x > y
    println("x es mayor que y")
else
    println("x e y son iguales")
end
----

De nuevo, sólo se ejecutará una rama. No hay límite al número de sentencias +elseif+. Si hay una sentencia +else+, debe estar al final (aunque no es necesario que esté).

[source,julia]
----
if alternativa == "a"
    dibujar_a()
elseif alternativa == "b"
    dibujar_b()
elseif alternativa == "c"
    dibujar_c()
end
----

Cada condición se comprueba en orden. Si la primera es falsa, se comprueba la siguiente, y así se sigue con las demás. Si una de ellas es verdadera, se ejecuta la rama correspondiente y la sentencia se termina. Si es verdadera más de una condición, sólo se ejecuta la primera rama verdadera.

=== Condicionales anidadas

Una condicional puede estar anidada dentro de otra. Podríamos haber escrito el ejemplo de la sección anterior de la siguiente manera: 
(((condicional anidada)))

[source,julia]
----
if x == y
    println("x e y son iguales")
else
    if x < y
        println("x es menor a y")
    else
        println("x es mayor a y")
    end
end
----

La condicional externa contiene dos ramas. La primera rama contiene una sentencia simple. La segunda rama contiene otra sentencia if, que tiene dos ramas propias. Estas dos ramas son ambas sentencias simples, aunque podrían ser sentencias condicionales.

Aunque la sangría no obligatoria de las sentencias hace evidente su estructura, las condicionales anidadas muy pronto se vuelven difíciles de leer. Se recomienda evitarlas cuando pueda.
(((sangría)))

Los operadores lógicos a menudo proporcionan una forma de simplificar las sentencias condicionales anidadas. Por ejemplo, podemos reescribir el siguiente código usando un solo condicional:

[source,julia]
----
if 0 < x
    if x < 10
        println("x es un número positivo de un solo dígito.")
    end
end
----

La sentencia +print+ sólo se ejecuta si conseguimos superar ambas condicionales, de modo que podemos obtener el mismo efecto con el operador +&&+:

[source,julia]
----
if 0 < x && x < 10
    println("x es un número positivo de un solo dígito.")
end
----

Para este tipo de condición, Julia proporciona una sintaxis más concisa:

[source,julia]
----
if 0 < x < 10
    println("x es un número positivo de un solo dígito.")
end
----


[[recursion]]
=== Recursion

It is legal for one function to call another; it is also legal for a function to call itself. It may not be obvious why that is a good thing, but it turns out to be one of the most magical things a program can do. For example, look at the following function:
(((countdown)))((("function", "programmer-defined", "countdown", see="countdown")))

[source,@julia-setup chap05]
----
function countdown(n)
    if n ≤ 0
        println("Blastoff!")
    else
        print(n, " ")
        countdown(n-1)
    end
end
----

If +n+ is 0 or negative, it outputs the word, +"Blastoff!"+ Otherwise, it outputs +n+ and then calls a function named +countdown+—itself—passing +n-1+ as an argument.

What happens if we call this function like this?

[source,@julia-repl-test chap05]
----
julia> countdown(3)
3 2 1 Blastoff!
----

The execution of +countdown+ begins with +n = 3+, and since +n+ is greater than 0, it outputs the value 3, and then calls itself ...

pass:[&#8193;]The execution of +countdown+ begins with +n = 2+, and since +n+ is greater than 0, pass:[<br/>&#8193;&#8193;]it outputs the value 2, and then calls itself ...

pass:[&#8193;&#8193;]The execution of +countdown+ begins with +n = 1+, and since +n+ is greater than 0, pass:[<br/>&#8193;&#8193;&#8193;]it outputs the value 1, and then calls itself ...

pass:[&#8193;&#8193;&#8193;]The execution of +countdown+ begins with +n = 0+, and since +n+ is not greater than pass:[<br/>&#8193;&#8193;&#8193;&#8193;]0, it outputs the word, +"Blastoff!"+ and then returns.

pass:[&#8193;&#8193;]The countdown that got +n = 1+ returns.

pass:[&#8193;]The countdown that got +n = 2+ returns.

The countdown that got +n = 3+ returns.

And then you’re back in +Main+.

A function that calls itself is _recursive_; the process of executing it is called _recursion_.
(((recursive function)))(((recursion)))

As another example, we can write a function that prints a string latexmath:[\(n\)] times.
(((printn)))((("function", "programmer-defined", "printn", see="printn")))

[source,julia]
----
function printn(s, n)
    if n ≤ 0
        return
    end
    println(s)
    printn(s, n-1)
end
----

If +n pass:[&lt;]= 0+ the +return+ statement exits the function. The flow of execution immediately returns to the caller, and the remaining lines of the function don’t run.
(((return)))((("keyword", "return", see="return")))(((return statement)))((("statement", "return", see="return statement")))

The rest of the function is similar to +countdown+: it displays +s+ and then calls itself to display +s+ latexmath:[\(n-1\)] additional times. So the number of lines of output is latexmath:[\(1 + (n - 1)\)], which adds up to latexmath:[\(n\)].

For simple examples like this, it is probably easier to use a +for+ loop. But we will see examples later that are hard to write with a +for+ loop and easy to write with recursion, so it is good to start early.

=== Stack Diagrams for Recursive Functions

In <<stack_diagrams>>, we used a stack diagram to represent the state of a program during a function call. The same kind of diagram can help interpret a recursive function.
(((stack diagram)))

Every time a function gets called, Julia creates a frame to contain the function’s local variables and parameters. For a recursive function, there might be more than one frame on the stack at the same time.
(((frame)))

[[fig05-1]]
.Stack diagram
image::images/fig51.svg[]


<<fig05-1>> shows a stack diagram for +countdown+ called with +n = 3+.

As usual, the top of the stack is the frame for +Main+. It is empty because we did not create any variables in +Main+ or pass any arguments to it.

The four +countdown+ frames have different values for the parameter +n+. The bottom of the stack, where +n = 0+, is called the _base case_. It does not make a recursive call, so there are no more frames.
(((base case)))

===== Exercise 5-1

As an exercise, draw a stack diagram for +printn+ called with +s = "Hello"+ and +n = 2+. Then write a function called +do_n+ that takes a function object and a number, +n+, as arguments, and that calls the given function latexmath:[\(n\)] times.

=== Infinite Recursion

If a recursion never reaches a base case, it goes on making recursive calls forever, and the program never terminates. This is known as _infinite recursion_, and it is generally not a good idea. Here is a minimal program with an infinite recursion:
(((infinite recursion)))(((recurse)))((("function", "programmer-defined", "recurse", see="recurse")))

[source,julia]
----
function recurse()
    recurse()
end
----

In most programming environments, a program with infinite recursion does not really run forever. Julia reports an error message when the maximum recursion depth is reached:

[source,jlcon]
----
julia> recurse()
ERROR: StackOverflowError:
Stacktrace:
 [1] recurse() at ./REPL[1]:2 (repeats 80000 times)
----

This stacktrace is a little bigger than the one we saw in the previous chapter. When the error occurs, there are 80000 +recurse+ frames on the stack!
(((stacktrace)))(((StackOverflowError)))((("error", "Core", "StackOverflowError", see="StackOverflowError")))

If you encounter an infinite recursion by accident, review your function to confirm that there is a base case that does not make a recursive call. And if there is a base case, check whether you are guaranteed to reach it.


=== Keyboard Input

The programs we have written so far accept no input from the user. They just do the same thing every time.

Julia provides a built-in function called +readline+ that stops the program and waits for the user to type something. When the user presses +RETURN+ or +ENTER+, the program resumes and +readline+ returns what the user typed as a string.
(((readline)))((("function", "Base", "readline", see="readline")))

[source,jlcon]
----
julia> text = readline()
What are you waiting for?
"What are you waiting for?"
----

Before getting input from the user, it is a good idea to print a prompt telling the user what to type:
(((prompt)))

[source,jlcon]
----
julia> print("What...is your name? "); readline()
What...is your name? Arthur, King of the Britons!
"Arthur, King of the Britons!"
----

A semi-colon +;+ allows to put multiple statements on the same line. In the REPL only the last statement returns its value.
(((;)))

If you expect the user to type an integer, you can try to convert the return value to +Int64+:

[source,jlcon]
----
julia> println("What...is the airspeed velocity of an unladen swallow?"); speed = readline()
What...is the airspeed velocity of an unladen swallow?
42
"42"
julia> parse(Int64, speed)
42
----

But if the user types something other than a string of digits, you get an error:
(((parse)))

[source,jlcon]
----
julia> println("What...is the airspeed velocity of an unladen swallow? "); speed = readline()
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
"What do you mean, an African or a European swallow?"
julia> parse(Int64, speed)
ERROR: ArgumentError: invalid base 10 digit 'W' in "What do you mean, an African or a European swallow?"
[...]
----

We will see how to handle this kind of error later.
(((ArgumentError)))


=== Debugging

When a syntax or runtime error occurs, the error message contains a lot of information, but it can be overwhelming. The most useful parts are usually:
(((debugging)))

* What kind of error it was, and

* Where it occurred.

Syntax errors are usually easy to find, but there are a few gotchas. In general, error messages indicate where the problem was discovered, but the actual error might be earlier in the code, sometimes on a previous line.

The same is true of runtime errors. Suppose you are trying to compute a signal-to-noise ratio in decibels. The formula is

[latexmath]
++++
\begin{equation}
{SNR_{\mathrm{db}} = 10 \log_{10} \frac{P_{\mathrm{signal}}}{P_{\mathrm{noise}}}\ .}
\end{equation}
++++

In Julia, you might write something like this:

[source,julia]
----
signal_power = 9
noise_power = 10
ratio = signal_power ÷ noise_power
decibels = 10 * log10(ratio)
print(decibels)
----

And you get:

[source,julia]
----
-Inf
----

This is not the result you expected.

To find the error, it might be useful to print the value of ratio, which turns out to be 0. The problem is in line 3, which uses floor division instead of floating-point division.

[WARNING]
====
You should take the time to read error messages carefully, but don’t assume that everything they say is correct.
====


=== Glossary

floor division::
An operator, denoted +÷+, that divides two numbers and rounds down (toward negative infinity) to an integer.
(((floor division)))

modulus operator::
An operator, denoted with a percent sign (%), that works on integers and returns the remainder when one number is divided by another.
(((modulus operator)))

boolean expression::
An expression whose value is either +true+ or +false+.
(((boolean expression)))

relational operator::
One of the operators that compares its operands: +==+, +≠+ (+!=+), +>+, +<+, +≥+ (+>=+), and +≤+ (+pass:[&lt;=]+).
(((relational operator)))

logical operator::
One of the operators that combines boolean expressions: +&&+ (and), +||+ (or), and +!+ (not).
(((logical operator)))

conditional statement::
A statement that controls the flow of execution depending on some condition.
(((conditional statement)))

condition::
The boolean expression in a conditional statement that determines which branch runs.
(((condition)))

compound statement::
A statement that consists of a header and a body. The body is terminated with the keyword +end+.
(((compound statement)))

branch::
One of the alternative sequences of statements in a conditional statement.
(((branch)))

chained conditional::
A conditional statement with a series of alternative branches.
(((chained conditional)))

nested conditional::
A conditional statement that appears in one of the branches of another conditional statement.
(((nested conditional)))

return statement::
A statement that causes a function to end immediately and return to the caller.
(((return statement)))

recursion::
The process of calling the function that is currently executing.
(((recursion)))

base case::
A conditional branch in a recursive function that does not make a recursive call.
(((base case)))

infinite recursion::
A recursion that doesn’t have a base case, or never reaches it. Eventually, an infinite recursion causes a runtime error.
(((infinite recursion)))


=== Exercises

[[ex05-1]]
===== Exercise 5-2

The function +time+ returns the current Greenwich Mean Time in seconds since “the epoch”, which is an arbitrary time used as a reference point. On UNIX systems, the epoch is 1 January 1970.
(((time)))((("function", "Base", "time", see="time")))

[source,@julia-repl]
----
time()
----

Write a script that reads the current time and converts it to a time of day in hours, minutes, and seconds, plus the number of days since the epoch.

[[ex05-2]]
===== Exercise 5-3

Fermat’s Last Theorem says that there are no positive integers latexmath:[\(a\)], latexmath:[\(b\)], and latexmath:[\(c\)] such that
(((Fermat's last theorem)))

[latexmath]
++++
\begin{equation}
{a^n + b^n = c^n}
\end{equation}
++++

for any value of latexmath:[\(n\)] greater than 2.

. Write a function named +checkfermat+ that takes four parameters—+a+, +b+, +c+ and +n+—and checks to see if Fermat’s theorem holds. If +n+ is greater than 2 and +pass:[a^n + b^n == c^n]+ the program should print, “Holy smokes, Fermat was wrong!” Otherwise the program should print, “No, that doesn’t work.”
(((checkfermat)))((("function", "programmer-defined", "checkfermat", see="checkfermat")))

. Write a function that prompts the user to input values for +a+, +b+, +c+ and +n+, converts them to integers, and uses +checkfermat+ to check whether they violate Fermat’s theorem.

[[ex05-3]]
===== Exercise 5-4

If you are given three sticks, you may or may not be able to arrange them in a triangle. For example, if one of the sticks is 12 inches long and the other two are one inch long, you will not be able to get the short sticks to meet in the middle. For any three lengths, there is a simple test to see if it is possible to form a triangle:

[TIP]
====
If any of the three lengths is greater than the sum of the other two, then you cannot form a triangle. Otherwise, you can. (If the sum of two lengths equals the third, they form what is called a “degenerate” triangle.)
====

. Write a function named +istriangle+ that takes three integers as arguments, and that prints either “Yes” or “No”, depending on whether you can or cannot form a triangle from sticks with the given lengths.
(((istriangle)))((("function", "programmer-defined", "istriangle", see="istriangle")))

. Write a function that prompts the user to input three stick lengths, converts them to integers, and uses +istriangle+ to check whether sticks with the given lengths can form a triangle.

[[ex05-4]]
===== Exercise 5-5

What is the output of the following program? Draw a stack diagram that shows the state of the program when it prints the result.
(((stack diagram)))(((recurse)))

[source,julia]
----
function recurse(n, s)
    if n == 0
        println(s)
    else
        recurse(n-1, n+s)
    end
end

recurse(3, 0)
----

. What would happen if you called this function like this: +recurse(-1, 0)+?

. Write a docstring that explains everything someone would need to know in order to use this function (and nothing else).

The following exercises use the +ThinkJulia+ module, described in <<chap04>>:

[[ex05-5]]
===== Exercise 5-6

Read the following function and see if you can figure out what it does (see the examples in <<chap04>>). Then run it and see if you got it right.

[source,julia]
----
function draw(t, length, n)
    if n == 0
        return
    end
    angle = 50
    forward(t, length*n)
    turn(t, -angle)
    draw(t, length, n-1)
    turn(t, 2*angle)
    draw(t, length, n-1)
    turn(t, -angle)
    forward(t, -length*n)
end
----

[[ex05-6]]
===== Exercise 5-7

[[fig05-2]]
.A Koch curve
image::images/fig52.svg[]


The Koch curve is a fractal that looks something like <<fig05-2>>. To draw a Koch curve with length latexmath:[\(x\)], all you have to do is
(((Koch curve)))(((fractal)))

. Draw a Koch curve with length latexmath:[\(\frac{x}{3}\)].

. Turn left 60 degrees.

. Draw a Koch curve with length latexmath:[\(\frac{x}{3}\)].

. Turn right 120 degrees.

. Draw a Koch curve with length latexmath:[\(\frac{x}{3}\)].

. Turn left 60 degrees.

. Draw a Koch curve with length latexmath:[\(\frac{x}{3}\)].

The exception is if latexmath:[\(x\)] is less than 3: in that case, you can just draw a straight line with length latexmath:[\(x\)].

. Write a function called +koch+ that takes a turtle and a length as parameters, and that uses the turtle to draw a Koch curve with the given length.
(((koch)))((("function", "programmer-defined", "koch", see="koch")))

. Write a function called +snowflake+ that draws three Koch curves to make the outline of a snowflake.
(((snowflake)))((("function", "programmer-defined", "snowflake", see="snowflake")))

. The Koch curve can be generalized in several ways. See https://en.wikipedia.org/wiki/Koch_snowflake for examples and implement your favorite.

